{"ast":null,"code":"/**\n * Enum for the operation mode of a JsonConvert instance.\n *\n * The values should be used as follows:\n * - DISABLE: json2typescript will be disabled, no type checking or mapping is done\n * - ENABLE: json2typescript is enabled, but only errors are logged\n * - LOGGING: json2typescript is enabled and detailed information is logged\n *\n * @see https://www.npmjs.com/package/json2typescript full documentation\n */\nexport var OperationMode = /*#__PURE__*/function (OperationMode) {\n  OperationMode[OperationMode[\"DISABLE\"] = 0] = \"DISABLE\";\n  OperationMode[OperationMode[\"ENABLE\"] = 1] = \"ENABLE\";\n  OperationMode[OperationMode[\"LOGGING\"] = 2] = \"LOGGING\";\n  return OperationMode;\n}(OperationMode || {});\n;\n/**\n * Enum for the property matching mode of a JsonConvert instance.\n *\n * The values should be used as follows:\n * - CASE_STRICT: JSON properties need to match exactly the names in the decorators\n * - CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they are not case sensitive\n *\n * @see https://www.npmjs.com/package/json2typescript full documentation\n */\nexport var PropertyMatchingRule = /*#__PURE__*/function (PropertyMatchingRule) {\n  PropertyMatchingRule[PropertyMatchingRule[\"CASE_STRICT\"] = 1] = \"CASE_STRICT\";\n  PropertyMatchingRule[PropertyMatchingRule[\"CASE_INSENSITIVE\"] = 2] = \"CASE_INSENSITIVE\";\n  return PropertyMatchingRule;\n}(PropertyMatchingRule || {});\n;\n/**\n * Enum for the value checking mode of a JsonConvert instance for the serialization and deserialization.\n *\n * The values should be used as follows:\n * - ALLOW_NULL: all given values in the JSON are allowed to be null\n * - ALLOW_OBJECT_NULL: objects in the JSON are allowed to be null, primitive types are not allowed to be null\n * - DISALLOW_NULL: no null values are tolerated in the JSON\n *\n * @see https://www.npmjs.com/package/json2typescript full documentation\n */\nexport var ValueCheckingMode = /*#__PURE__*/function (ValueCheckingMode) {\n  ValueCheckingMode[ValueCheckingMode[\"ALLOW_NULL\"] = 1] = \"ALLOW_NULL\";\n  ValueCheckingMode[ValueCheckingMode[\"ALLOW_OBJECT_NULL\"] = 2] = \"ALLOW_OBJECT_NULL\";\n  ValueCheckingMode[ValueCheckingMode[\"DISALLOW_NULL\"] = 3] = \"DISALLOW_NULL\";\n  return ValueCheckingMode;\n}(ValueCheckingMode || {});\n;\n/**\n * Enum for the property converting mode of a property (de)serialized with JsonConvert.\n *\n * The converting mode defines what happens for nullable types.\n * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\n *\n * The setting overrides the behavior of the ValueCheckingMode for a specific property.\n *\n * The values should be used as follows:\n * - MAP_NULLABLE: a nullable property is passed to the mapper, type is normally checked\n * - IGNORE_NULLABLE: the property is never passed if missing, undefined or null\n * - PASS_NULLABLE: the property is passed and the given type for the mapping is ignored\n *\n * @see https://www.npmjs.com/package/json2typescript full documentation\n */\nexport var PropertyConvertingMode = /*#__PURE__*/function (PropertyConvertingMode) {\n  PropertyConvertingMode[PropertyConvertingMode[\"MAP_NULLABLE\"] = 0] = \"MAP_NULLABLE\";\n  PropertyConvertingMode[PropertyConvertingMode[\"IGNORE_NULLABLE\"] = 1] = \"IGNORE_NULLABLE\";\n  PropertyConvertingMode[PropertyConvertingMode[\"PASS_NULLABLE\"] = 2] = \"PASS_NULLABLE\";\n  return PropertyConvertingMode;\n}(PropertyConvertingMode || {});\n;\n//# sourceMappingURL=json-convert-enums.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}