{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Type } from \"serializer.ts/Decorators\";\nexport class Room {}\n// not the same as an actual room configuration lol\nexport class RoomConfiguration {\n  constructor() {\n    this.input_reachability = new Map();\n  }\n  match(n) {\n    return n === this.name;\n  }\n}\n__decorate([Type(() => DeviceConfiguration), __metadata(\"design:type\", Array)], RoomConfiguration.prototype, \"devices\", void 0);\nexport class DeviceConfiguration {\n  hasRole(role) {\n    for (const r of this.roles) {\n      if (r._id === role) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n__decorate([Type(() => DeviceTypeConfiguration), __metadata(\"design:type\", DeviceTypeConfiguration)], DeviceConfiguration.prototype, \"type\", void 0);\n__decorate([Type(() => RoleConfiguration), __metadata(\"design:type\", Array)], DeviceConfiguration.prototype, \"roles\", void 0);\nexport class DeviceTypeConfiguration {}\nexport class RoleConfiguration {}\nexport class RoomStatus {}\n__decorate([Type(() => DeviceStatus), __metadata(\"design:type\", Array)], RoomStatus.prototype, \"displays\", void 0);\n__decorate([Type(() => DeviceStatus), __metadata(\"design:type\", Array)], RoomStatus.prototype, \"audioDevices\", void 0);\nexport class UIConfiguration {}\n__decorate([Type(() => PanelConfiguration), __metadata(\"design:type\", Array)], UIConfiguration.prototype, \"panels\", void 0);\n__decorate([Type(() => PresetConfiguration), __metadata(\"design:type\", Array)], UIConfiguration.prototype, \"presets\", void 0);\n__decorate([Type(() => IOConfiguration), __metadata(\"design:type\", Array)], UIConfiguration.prototype, \"outputConfiguration\", void 0);\n__decorate([Type(() => IOConfiguration), __metadata(\"design:type\", Array)], UIConfiguration.prototype, \"inputConfiguration\", void 0);\n__decorate([Type(() => AudioConfiguration), __metadata(\"design:type\", Array)], UIConfiguration.prototype, \"audioConfiguration\", void 0);\n__decorate([Type(() => PseudoInput), __metadata(\"design:type\", Array)], UIConfiguration.prototype, \"pseudoInputs\", void 0);\nexport class Camera {}\nexport class CameraPreset {}\nexport class Recording {}\nexport class ConfigCommands {}\nexport class ConfigCommand {}\nexport class PseudoInput {}\nexport class PseudoInputConfig {}\nexport class PanelConfiguration {}\nexport class PresetConfiguration {\n  constructor() {\n    this.audioGroups = new Map();\n  }\n}\nexport class AudioConfiguration {}\nexport class AudioConfig {\n  constructor(display, audioDevices, roomWide) {\n    this.display = display;\n    this.audioDevices = audioDevices;\n    this.roomWide = roomWide;\n  }\n}\nexport class IOConfiguration {}\nexport class DeviceStatus {\n  match(n) {\n    return n === this.name;\n  }\n}\nexport class Preset {\n  constructor(name, icon, displays, audioDevices, inputs, shareableDisplays, independentAudioDevices, audioTypes, masterVolume, beforeMuteLevel, commands, matches, cameras, recording) {\n    this.displays = [];\n    this.audioDevices = [];\n    this.inputs = [];\n    this.extraInputs = [];\n    this.independentAudioDevices = [];\n    this.audioTypes = new Map();\n    this.name = name;\n    this.icon = icon;\n    this.displays = displays;\n    this.audioDevices = audioDevices;\n    this.inputs = inputs;\n    this.shareableDisplays = shareableDisplays;\n    this.independentAudioDevices = independentAudioDevices;\n    this.audioTypes = audioTypes;\n    this.masterVolume = masterVolume;\n    this.beforeMuteLevel = beforeMuteLevel;\n    this.commands = commands;\n    this.volumeMatches = matches;\n    this.cameras = cameras;\n    this.recording = recording;\n  }\n}\nexport class Panel {\n  constructor(hostname, uipath, preset, features) {\n    this.features = [];\n    this.render = false;\n    this.hostname = hostname;\n    this.uipath = uipath;\n    this.preset = preset;\n    this.features = features;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}