{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { EventEmitter } from \"@angular/core\";\nimport { $WebSocket } from \"angular2-websocket/angular2-websocket\";\nimport { JsonConvert, JsonObject, JsonProperty, Any, JsonConverter } from \"json2typescript\";\nimport * as i0 from \"@angular/core\";\nexport const OPEN = \"open\";\nexport const CLOSE = \"close\";\nexport const MESSAGE = \"message\";\nexport let SocketService = /*#__PURE__*/(() => {\n  class SocketService {\n    constructor() {\n      this.webSocketConfig = {\n        initialTimeout: 100,\n        maxTimeout: 500,\n        reconnectIfNotNormalClose: true\n      };\n      this.url = \"ws://\" + window.location.host + \"/websocket\";\n      this.socket = new $WebSocket(this.url, null, this.webSocketConfig);\n      this.listener = new EventEmitter();\n      this.screenoff = false;\n      const jsonConvert = new JsonConvert();\n      jsonConvert.ignorePrimitiveChecks = false;\n      this.socket.onMessage(msg => {\n        if (msg.data.includes(\"keepalive\")) {\n          // TODO send a pong back\n        } else if (msg.data.includes(\"refresh\")) {\n          console.log(\"refreshing!\");\n          location.assign(\"http://\" + location.hostname + \":8888/\");\n        } else if (msg.data.includes(\"screenoff\")) {\n          console.log(\"adding screenoff element\");\n          this.screenoff = true;\n        } else if (msg.data.includes(\"websocketTest\")) {\n          console.log(\"socket test\");\n        } else {\n          const data = JSON.parse(msg.data);\n          const event = jsonConvert.deserialize(data, Event);\n          console.debug(\"received event\", event);\n          this.listener.emit({\n            type: MESSAGE,\n            data: event\n          });\n        }\n      }, {\n        autoApply: false\n      });\n      this.socket.onOpen(msg => {\n        console.log(\"Websocket opened with\", this.url, \":\", msg);\n        this.listener.emit({\n          type: OPEN\n        });\n      });\n      this.socket.onError(msg => {\n        console.log(\"websocket closed.\", msg);\n        this.listener.emit({\n          type: CLOSE\n        });\n      });\n      this.socket.onClose(msg => {\n        console.log(\"trying again\", msg);\n      });\n    }\n    close() {\n      this.socket.close(false);\n    }\n    getEventListener() {\n      return this.listener;\n    }\n  }\n  SocketService.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n  SocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac\n  });\n  return SocketService;\n})();\nexport let BasicRoomInfo = class BasicRoomInfo {\n  constructor(roomID) {\n    this.BuildingID = \"\";\n    this.RoomID = \"\";\n    if (roomID == null || roomID === undefined) {\n      return;\n    }\n    const split = roomID.split(\"-\");\n    if (split.length === 2) {\n      this.BuildingID = split[0];\n      this.RoomID = split[0] + \"-\" + split[1];\n    }\n  }\n};\n__decorate([JsonProperty(\"buildingID\", String, true), __metadata(\"design:type\", Object)], BasicRoomInfo.prototype, \"BuildingID\", void 0);\n__decorate([JsonProperty(\"roomID\", String, true), __metadata(\"design:type\", Object)], BasicRoomInfo.prototype, \"RoomID\", void 0);\nBasicRoomInfo = __decorate([JsonObject(\"BasicRoomInfo\"), __metadata(\"design:paramtypes\", [String])], BasicRoomInfo);\nexport let BasicDeviceInfo = class BasicDeviceInfo {\n  constructor(deviceID) {\n    this.BuildingID = \"\";\n    this.RoomID = \"\";\n    this.DeviceID = \"\";\n    if (deviceID == null || deviceID === undefined) {\n      return;\n    }\n    const split = deviceID.split(\"-\");\n    if (split.length === 3) {\n      this.BuildingID = split[0];\n      this.RoomID = split[0] + \"-\" + split[1];\n      this.DeviceID = split[0] + \"-\" + split[1] + \"-\" + split[2];\n    }\n  }\n};\n__decorate([JsonProperty(\"buildingID\", String, true), __metadata(\"design:type\", Object)], BasicDeviceInfo.prototype, \"BuildingID\", void 0);\n__decorate([JsonProperty(\"roomID\", String, true), __metadata(\"design:type\", Object)], BasicDeviceInfo.prototype, \"RoomID\", void 0);\n__decorate([JsonProperty(\"deviceID\", String, true), __metadata(\"design:type\", Object)], BasicDeviceInfo.prototype, \"DeviceID\", void 0);\nBasicDeviceInfo = __decorate([JsonObject(\"BasicDeviceInfo\"), __metadata(\"design:paramtypes\", [String])], BasicDeviceInfo);\nlet DateConverter = class DateConverter {\n  serialize(date) {\n    function pad(n) {\n      return n < 10 ? \"0\" + n : n;\n    }\n    return date.getUTCFullYear() + \"-\" + pad(date.getUTCMonth() + 1) + \"-\" + pad(date.getUTCDate()) + \"T\" + pad(date.getUTCHours()) + \":\" + pad(date.getUTCMinutes()) + \":\" + pad(date.getUTCSeconds()) + \"Z\";\n  }\n  deserialize(date) {\n    return new Date(date);\n  }\n};\nDateConverter = __decorate([JsonConverter], DateConverter);\nexport let Event = class Event {\n  constructor() {\n    this.GeneratingSystem = \"\";\n    this.Timestamp = undefined;\n    this.EventTags = [];\n    this.TargetDevice = new BasicDeviceInfo(undefined);\n    this.AffectedRoom = new BasicRoomInfo(undefined);\n    this.Key = \"\";\n    this.Value = \"\";\n    this.User = \"\";\n    this.Data = undefined;\n  }\n  hasTag(tag) {\n    return this.EventTags.includes(tag);\n  }\n};\n__decorate([JsonProperty(\"generating-system\", String, true), __metadata(\"design:type\", Object)], Event.prototype, \"GeneratingSystem\", void 0);\n__decorate([JsonProperty(\"timestamp\", DateConverter, true), __metadata(\"design:type\", Date)], Event.prototype, \"Timestamp\", void 0);\n__decorate([JsonProperty(\"event-tags\", [String], true), __metadata(\"design:type\", Array)], Event.prototype, \"EventTags\", void 0);\n__decorate([JsonProperty(\"target-device\", BasicDeviceInfo, true), __metadata(\"design:type\", Object)], Event.prototype, \"TargetDevice\", void 0);\n__decorate([JsonProperty(\"affected-room\", BasicRoomInfo), __metadata(\"design:type\", Object)], Event.prototype, \"AffectedRoom\", void 0);\n__decorate([JsonProperty(\"key\", String, true), __metadata(\"design:type\", Object)], Event.prototype, \"Key\", void 0);\n__decorate([JsonProperty(\"value\", String, true), __metadata(\"design:type\", Object)], Event.prototype, \"Value\", void 0);\n__decorate([JsonProperty(\"user\", String, true), __metadata(\"design:type\", Object)], Event.prototype, \"User\", void 0);\n__decorate([JsonProperty(\"data\", Any, true), __metadata(\"design:type\", Object)], Event.prototype, \"Data\", void 0);\nEvent = __decorate([JsonObject(\"Event\")], Event);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}