{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { catchError, retry, tap } from 'rxjs/operators';\nimport { Recording } from '../../objects/objects';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\nfunction RecordingComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-icon\", 3);\n    i0.ɵɵtext(2, \"fiber_manual_record\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction RecordingComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"stop\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction RecordingComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind3(2, 1, ctx_r2.recordTime * 1000, \"HH : mm : ss\", \"UTC\"), \"\");\n  }\n}\nfunction RecordingComponent_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"Record\");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nexport let RecordingComponent = /*#__PURE__*/(() => {\n  class RecordingComponent {\n    constructor(http) {\n      this.http = http;\n      this.isRecording = false;\n      this.waiting = false;\n      this.recordTime = 0;\n      this.startRecording = rec => {\n        console.log(\"starting recording\");\n        if (!rec.start) {\n          console.log(\"no url target to start recording\");\n          return false;\n        }\n        this.http.get(rec.start).pipe(tap(data => console.log(\"startRecording response:\", data)), retry(2), catchError(err => {\n          throw \"failed to start recording. \" + err;\n        })).subscribe({\n          next: data => {\n            console.log(\"started recording\", data);\n            this.recordTime = 0;\n            this.recordTimer = setInterval(() => {\n              this.recordTime++;\n              if (this.recordTime >= 60 * this.recording.maxTime) {\n                this.stopRecording(this.recording);\n              }\n            }, 1000);\n            this.isRecording = true;\n          },\n          error: error => {\n            console.warn(\"error\", error);\n          },\n          complete: () => {\n            console.log(\"complete\");\n          }\n        });\n      };\n      this.stopRecording = rec => {\n        console.log(\"stopping recording\");\n        if (!rec.stop) {\n          console.log(\"no url target to stop recording\");\n          return false;\n        }\n        this.http.get(rec.stop).pipe(tap(data => console.log(\"stopRecording response:\", data)), retry(2), catchError(err => {\n          throw \"failed to stop recording. \" + err;\n        })).subscribe({\n          next: data => {\n            console.log(\"recording stopped\", data);\n            clearInterval(this.recordTimer);\n            this.isRecording = false;\n          },\n          error: error => {\n            console.warn(\"error\", error);\n          },\n          complete: () => {\n            console.log(\"complete\");\n          }\n        });\n      };\n    }\n    ngOnInit() {\n      if (this.recording != undefined && this.recording.maxTime === undefined) {\n        this.recording.maxTime = 120; // default maxTime to 120\n      }\n    }\n\n    onClick() {\n      if (this.isRecording) {\n        this.stopRecording(this.recording);\n      } else {\n        this.startRecording(this.recording);\n      }\n    }\n  }\n  RecordingComponent.ɵfac = function RecordingComponent_Factory(t) {\n    return new (t || RecordingComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  RecordingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RecordingComponent,\n    selectors: [[\"recording\"]],\n    inputs: {\n      recording: \"recording\"\n    },\n    decls: 8,\n    vars: 5,\n    consts: [[1, \"recording-wrapper\"], [\"mat-mini-fab\", \"\", 3, \"color\", \"click\"], [4, \"ngIf\"], [\"color\", \"warn\"]],\n    template: function RecordingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\")(2, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function RecordingComponent_Template_button_click_2_listener() {\n          return ctx.onClick();\n        });\n        i0.ɵɵtemplate(3, RecordingComponent_ng_container_3_Template, 3, 0, \"ng-container\", 2);\n        i0.ɵɵtemplate(4, RecordingComponent_ng_container_4_Template, 3, 0, \"ng-container\", 2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"span\");\n        i0.ɵɵtemplate(6, RecordingComponent_ng_container_6_Template, 3, 5, \"ng-container\", 2);\n        i0.ɵɵtemplate(7, RecordingComponent_ng_container_7_Template, 2, 0, \"ng-container\", 2);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"color\", ctx.isRecording ? \"warn\" : \"primary\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isRecording);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isRecording);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isRecording);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isRecording);\n      }\n    },\n    dependencies: [i2.NgIf, i3.MatMiniFabButton, i4.MatIcon, i2.DatePipe],\n    styles: [\".recording-wrapper[_ngcontent-%COMP%]{height:100%;margin:0;padding:0;display:flex;justify-content:left}.recording-wrapper[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{margin:auto,0,auto,0;padding-left:3vw;display:flex;align-items:center}\"]\n  });\n  return RecordingComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}