{"ast":null,"code":"import _defineProperty from \"/home/orcrist/Desktop/touchpanel-ui-microservice/cherry/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { of, timeout } from \"rxjs\";\nimport { UIConfiguration, Room, RoomConfiguration, RoomStatus } from \"../objects/objects\";\nimport { JsonConvert } from \"json2typescript\";\nimport { deserialize } from \"serializer.ts/Serializer\";\nimport { tap } from \"rxjs\";\nimport { catchError } from \"rxjs\";\nimport { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst RETRY_TIMEOUT = 5 * 1000;\nconst MONITOR_TIMEOUT = 30 * 1000;\nexport let APIService = /*#__PURE__*/(() => {\n  var _class;\n  class APIService {\n    constructor(http) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"loaded\", void 0);\n      _defineProperty(this, \"jsonConvert\", void 0);\n      this.http = http;\n      this.loaded = new EventEmitter();\n      this.jsonConvert = new JsonConvert();\n      this.jsonConvert.ignorePrimitiveChecks = false;\n      if (APIService.options == null) {\n        const headers = new Headers();\n        headers.append(\"content-type\", \"application/json\");\n        APIService.options = {\n          headers: new HttpHeaders(headers)\n        };\n        APIService.localurl = window.location.protocol + \"//\" + window.location.host;\n        APIService.room = new Room();\n        this.setupHostname();\n      } else {\n        this.loaded.emit(true);\n      }\n    }\n    setupHostname() {\n      this.getHostname().pipe(tap(data => console.log(\"getHostname response\", data)), catchError(this.handleError(\"get\", [])), map(response => response)).subscribe({\n        next: data => {\n          APIService.hostname = String(data);\n          this.setupPiHostname();\n        },\n        error: err => {\n          setTimeout(() => this.setupHostname(), RETRY_TIMEOUT);\n          console.error(\"getHostname error\", err);\n        },\n        complete: () => {\n          console.log(\"getHostname complete\");\n        }\n      });\n    }\n    // hostname, building, room\n    setupPiHostname() {\n      this.getPiHostname().pipe(tap(data => console.log(\"getPiHostname response\", data)), catchError(this.handleError(\"get\", [])), map(response => response)).subscribe({\n        next: data => {\n          APIService.piHostname = String(data);\n          const split = APIService.piHostname.split(\"-\");\n          APIService.building = split[0];\n          APIService.roomName = split[1];\n          this.setupAPIUrl(false);\n        },\n        error: err => {\n          setTimeout(() => this.setupPiHostname(), RETRY_TIMEOUT);\n          console.error(\"getPiHostname error\", err);\n        },\n        complete: () => {\n          console.log(\"getPiHostname complete\");\n        }\n      });\n    }\n    setupAPIUrl(next) {\n      if (next) {\n        console.warn(\"switching to next api\");\n        this.getNextAPIUrl().pipe(tap(data => console.log(\"getNextAPIUrl response\", data)), catchError(this.handleError(\"get\", []))).subscribe({\n          next: data => {},\n          error: err => {\n            setTimeout(() => this.setupAPIUrl(next), RETRY_TIMEOUT);\n            console.error(\"getNextAPIUrl error\", err);\n          },\n          complete: () => {\n            console.log(\"getNextAPIUrl complete\");\n          }\n        });\n      }\n      this.getAPIUrl().pipe(tap(data => console.log(\"getAPIUrl response\", data)), catchError(this.handleError(\"get\", []))).subscribe({\n        next: data => {\n          APIService.apihost = \"http://\" + location.hostname;\n          if (!data[\"hostname\"].includes(\"localhost\")) {\n            APIService.apihost = \"http://\" + data[\"hostname\"];\n          }\n          APIService.apiurl = APIService.apihost + \":8000/buildings/\" + APIService.building + \"/rooms/\" + APIService.roomName;\n          console.info(\"API url:\", APIService.apiurl);\n          if (!next) {\n            this.setupUIConfig();\n          }\n        },\n        error: err => {\n          setTimeout(() => this.setupAPIUrl(next), RETRY_TIMEOUT);\n          console.error(\"getAPIUrl error\", err);\n        },\n        complete: () => {\n          console.log(\"getAPIUrl complete\");\n        }\n      });\n    }\n    monitorAPI() {\n      this.getAPIHealth().pipe(tap(data => console.log(\"getAPIHealth response\", data)), catchError(this.handleError(\"get\", []))).subscribe({\n        next: data => {\n          if (data[\"statuscode\"] !== 0) {\n            this.setupAPIUrl(true);\n          }\n          setTimeout(() => this.monitorAPI(), MONITOR_TIMEOUT);\n        },\n        error: err => {\n          this.setupAPIUrl(true);\n          setTimeout(() => this.monitorAPI(), MONITOR_TIMEOUT);\n        },\n        complete: () => {\n          console.log(\"getAPIHealth complete\");\n        }\n      });\n    }\n    setupUIConfig() {\n      this.getUIConfig().pipe(tap(data => console.log(\"getUIConfig response\", data)), catchError(this.handleError(\"get\", []))).subscribe({\n        next: data => {\n          console.info(\"ui-config:\", data);\n          APIService.room.uiconfig = new UIConfiguration();\n          Object.assign(APIService.room.uiconfig, data);\n          console.info(\"UI Configuration:\", APIService.room.uiconfig);\n          this.setupRoomConfig();\n        },\n        error: err => {\n          setTimeout(() => this.setupUIConfig(), RETRY_TIMEOUT);\n          console.error(\"getUIConfig error\", err);\n        },\n        complete: () => {\n          console.log(\"getUIConfig complete\");\n        }\n      });\n    }\n    setupRoomConfig() {\n      this.getRoomConfig().pipe(tap(data => console.log(\"getRoomConfig response\", data)), catchError(this.handleError(\"get\", []))).subscribe({\n        next: data => {\n          APIService.room.config = new RoomConfiguration();\n          Object.assign(APIService.room.config, data);\n          console.info(\"Room Configuration:\", APIService.room.config);\n          this.setupRoomStatus();\n        },\n        error: err => {\n          setTimeout(() => this.setupRoomConfig(), RETRY_TIMEOUT);\n          console.error(\"getRoomConfig error\", err);\n        },\n        complete: () => {\n          console.log(\"getRoomConfig complete\");\n        }\n      });\n    }\n    setupRoomStatus() {\n      this.getRoomStatus().pipe(tap(data => console.log(\"getRoomStatus response\", data)), catchError(this.handleError(\"get\", []))).subscribe({\n        next: data => {\n          APIService.room.status = new RoomStatus();\n          Object.assign(APIService.room.status, data);\n          console.info(\"Room Status:\", APIService.room.status);\n          this.loaded.emit(true);\n        },\n        error: err => {\n          setTimeout(() => this.setupRoomStatus(), RETRY_TIMEOUT);\n          console.error(\"getRoomStatus error\", err);\n        },\n        complete: () => {\n          console.log(\"getRoomStatus complete\");\n        }\n      });\n    }\n    get(url, success = func => {}, err = func => {}, after = func => {}) {\n      this.http.get(url).pipe(tap(data => console.log(\"got data\", data)), catchError(this.handleError(\"get\", [])), map(response => response)).subscribe({\n        next: data => {\n          success();\n        },\n        error: error => {\n          console.error(\"error:\", error);\n          err();\n        },\n        complete: () => {\n          after();\n        }\n      });\n    }\n    getHostname() {\n      return this.http.get(APIService.localurl + \"/hostname\").pipe(tap(data => console.log(\"got hostname\", data)), catchError(this.handleError(\"getHostname\", [])), map(response => response));\n    }\n    getPiHostname() {\n      return this.http.get(APIService.localurl + \"/pihostname\").pipe(tap(data => console.log(\"got pihostname\", data)), catchError(this.handleError(\"getPiHostname\", [])), map(response => response));\n    }\n    getAPIUrl() {\n      return this.http.get(APIService.localurl + \"/api\").pipe(tap(data => console.log(\"got apiurl\", data)), catchError(this.handleError(\"getAPIUrl\", [])), map(response => response));\n    }\n    getAPIHealth() {\n      return this.http.get(APIService.apihost + \":8000/mstatus\").pipe(tap(data => console.log(\"got api health\", data)), catchError(this.handleError(\"getAPIHealth\", [])), map(response => response), timeout(RETRY_TIMEOUT));\n    }\n    getNextAPIUrl() {\n      return this.http.get(APIService.localurl + \"/nextapi\").pipe(tap(data => console.log(\"got nextapi\", data)), catchError(this.handleError(\"getNextAPIUrl\", [])), map(response => response));\n    }\n    getUIConfig() {\n      return this.http.get(APIService.apiurl + \"/uiconfig\").pipe(tap(data => console.log(\"got uiconfig\", data)), catchError(this.handleError(\"getUIConfig\", [])), map(response => response), map(res => deserialize(UIConfiguration, res)));\n    }\n    getRoomConfig() {\n      return this.http.get(APIService.apiurl + \"/configuration\").pipe(tap(data => console.log(\"got roomconfig\", data)), catchError(this.handleError(\"getRoomConfig\", [])), map(response => response), map(res => deserialize(RoomConfiguration, res)));\n    }\n    getRoomStatus() {\n      return this.http.get(APIService.apiurl).pipe(tap(data => console.log(\"got roomstatus\", data)), catchError(this.handleError(\"getRoomStatus\", [])), map(response => response), map(res => deserialize(RoomStatus, res)));\n    }\n    sendEvent(event) {\n      const data = this.jsonConvert.serializeObject(event);\n      console.log(\"sending event\", data);\n      this.http.post(APIService.localurl + \"/publish\", data, APIService.options).subscribe();\n    }\n    help(type) {\n      const body = {\n        building: APIService.building,\n        room: APIService.roomName\n      };\n      switch (type) {\n        case \"help\":\n          return this.http.post(APIService.localurl + \"/help \", body, APIService.options).pipe(tap(data => console.log(\"sent help\", data)), catchError(this.handleError('help', [])));\n        case \"confirm\":\n          return this.http.post(APIService.localurl + \"/confirmhelp\", body, APIService.options);\n        case \"cancel\":\n          return this.http.post(APIService.localurl + \"/cancelhelp\", body, APIService.options);\n      }\n    }\n    handleError(operation = \"operation\", result) {\n      return error => {\n        console.error(\"error doing ${operation}:\", error);\n        return of(result);\n      };\n    }\n  }\n  _class = APIService;\n  _defineProperty(APIService, \"building\", void 0);\n  _defineProperty(APIService, \"roomName\", void 0);\n  _defineProperty(APIService, \"piHostname\", void 0);\n  _defineProperty(APIService, \"hostname\", void 0);\n  _defineProperty(APIService, \"apiurl\", void 0);\n  _defineProperty(APIService, \"room\", void 0);\n  _defineProperty(APIService, \"apihost\", void 0);\n  _defineProperty(APIService, \"localurl\", void 0);\n  _defineProperty(APIService, \"options\", void 0);\n  _defineProperty(APIService, \"\\u0275fac\", function APIService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  });\n  _defineProperty(APIService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  }));\n  return APIService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}