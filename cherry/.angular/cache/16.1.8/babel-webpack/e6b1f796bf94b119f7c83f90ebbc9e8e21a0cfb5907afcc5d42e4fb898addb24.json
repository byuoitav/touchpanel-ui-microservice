{"ast":null,"code":"import { MappingOptions, Settings } from \"./json-convert-options\";\nimport { Any } from \"./any\";\nimport { PropertyConvertingMode } from \"./json-convert-enums\";\n/**\n * Map of all registered json objects\n */\nvar jsonObjectsMap = new Map();\n/**\n * Decorator of a class that is a custom converter.\n *\n * @param target the class\n */\nexport function JsonConverter(target) {\n  target[Settings.MAPPER_PROPERTY] = \"\";\n}\n/**\n * Decorator of a class that comes from a JSON object.\n *\n * @param classIdentifier the class identifier\n *\n * @returns\n *\n * @throws Error\n */\nexport function JsonObject(classIdentifier) {\n  return function (target) {\n    var _a;\n    // Store the classIdentifier with the actual class reference\n    if (jsonObjectsMap.has(classIdentifier)) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"You must use unique class identifiers in the @JsonObject() decorator.\\n\\n\" + \"\\tClass identifier: \\n\" + \"\\t\\t\" + classIdentifier + \"\\n\\n\" + \"This class identifier has been already used for class \\\"\" + ((_a = jsonObjectsMap.get(classIdentifier)) === null || _a === void 0 ? void 0 : _a.name) + \"\\\".\\n\\n\");\n    } else {\n      jsonObjectsMap.set(classIdentifier, target);\n    }\n    target.prototype[Settings.CLASS_IDENTIFIER] = classIdentifier.length > 0 ? classIdentifier : target.name;\n    var mapping = target.prototype[Settings.MAPPING_PROPERTY];\n    // Make sure we replace the mapping names of all properties of this class\n    if (!mapping) return;\n    var unmappedKeys = Object.keys(mapping).filter(function (val) {\n      return val.indexOf(Settings.CLASS_IDENTIFIER + \".\") === 0;\n    });\n    for (var _i = 0, unmappedKeys_1 = unmappedKeys; _i < unmappedKeys_1.length; _i++) {\n      var key = unmappedKeys_1[_i];\n      mapping[key.replace(Settings.CLASS_IDENTIFIER, target.prototype[Settings.CLASS_IDENTIFIER])] = mapping[key];\n      // We must delete the mapping without associated class since it will\n      // cause issues with inheritance of mappings and overrides.\n      delete mapping[key];\n    }\n  };\n}\n/**\n * Decorator of a class property that comes from a JSON object.\n *\n * The second param can be either a type or a class of a custom converter.\n *\n * Use the following notation for the type:\n * - Primitive type: String|Number|Boolean\n * - Custom type: YourClassName\n * - Array type: [String|Number|Boolean|YourClassName]\n *\n * If you decide to use a custom converter, make sure this class implements the interface JsonCustomConvert from this package.\n *\n * @param jsonPropertyName optional param (default: classPropertyName) the property name in the expected JSON object\n * @param conversionOption optional param (default: Any), should be either the expected type (String|Boolean|Number|etc) or a custom converter class implementing JsonCustomConvert\n * @param convertingMode optional param (default: PropertyConvertingMode.MAP_NULLABLE), determines how nullable\n * property types should be serialized and deserialized\n *\n * @returns\n *\n * @throws Error\n */\nexport function JsonProperty() {\n  var params = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    params[_i] = arguments[_i];\n  }\n  return function (target, classPropertyName) {\n    // target is the class\n    var jsonPropertyName = classPropertyName;\n    var conversionOption = Any;\n    var convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n    switch (params.length) {\n      case 1:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        jsonPropertyName = params[0];\n        break;\n      case 2:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        if (params[1] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n        jsonPropertyName = params[0];\n        conversionOption = params[1];\n        break;\n      case 3:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        if (params[1] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n        jsonPropertyName = params[0];\n        conversionOption = params[1];\n        if (params[2] === true) {\n          convertingMode = PropertyConvertingMode.IGNORE_NULLABLE;\n        } else if (params[2] === PropertyConvertingMode.IGNORE_NULLABLE || params[2] === PropertyConvertingMode.PASS_NULLABLE || params[2] === PropertyConvertingMode.MAP_NULLABLE) {\n          convertingMode = params[2];\n        } else {\n          convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n        }\n        break;\n      default:\n        break;\n    }\n    if (typeof target[Settings.MAPPING_PROPERTY] === \"undefined\") {\n      target[Settings.MAPPING_PROPERTY] = [];\n    }\n    var jsonPropertyMappingOptions = new MappingOptions();\n    jsonPropertyMappingOptions.classPropertyName = classPropertyName;\n    jsonPropertyMappingOptions.jsonPropertyName = jsonPropertyName;\n    jsonPropertyMappingOptions.convertingMode = convertingMode;\n    // Check if conversionOption is a type or a custom converter.\n    if (typeof conversionOption !== \"undefined\" && conversionOption !== null && typeof conversionOption[Settings.MAPPER_PROPERTY] !== \"undefined\") {\n      jsonPropertyMappingOptions.customConverter = new conversionOption();\n    } else {\n      jsonPropertyMappingOptions.expectedJsonType = conversionOption;\n    }\n    // Save the mapping info\n    if (typeof target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] === \"undefined\") {\n      target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] = jsonPropertyMappingOptions;\n    } else {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to add multiple decorators for the same property.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\");\n    }\n  };\n}\n//# sourceMappingURL=json-convert-decorators.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}