{"ast":null,"code":"import _defineProperty from \"/home/orcrist/Desktop/touchpanel-ui-microservice/cherry/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport { APIService } from \"./api.service\";\nimport { MESSAGE } from \"./socket.service\";\nimport { Preset, Panel, AudioConfig } from \"../objects/objects\";\nimport { Device, Input, Display, AudioDevice, POWER, INPUT, BLANKED, VOLUME, MUTED } from \"../objects/status.objects\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./socket.service\";\nimport * as i3 from \"@angular/common/http\";\nconst PRESET_SWITCH = \"preset-switch\";\nexport let DataService = /*#__PURE__*/(() => {\n  var _class;\n  class DataService {\n    constructor(api, socket, http) {\n      _defineProperty(this, \"api\", void 0);\n      _defineProperty(this, \"socket\", void 0);\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"loaded\", void 0);\n      _defineProperty(this, \"panel\", void 0);\n      _defineProperty(this, \"inputs\", []);\n      _defineProperty(this, \"displays\", []);\n      _defineProperty(this, \"audioDevices\", []);\n      _defineProperty(this, \"audioConfig\", new Map());\n      _defineProperty(this, \"presets\", []);\n      _defineProperty(this, \"panels\", []);\n      _defineProperty(this, \"inputReachability\", new Map());\n      _defineProperty(this, \"dividerSensor\", void 0);\n      _defineProperty(this, \"setCurrentPreset\", () => {\n        if (!this.panel.features.includes(PRESET_SWITCH)) {\n          return;\n        }\n        this.http.get(\"http://\" + this.dividerSensor.address + \":10000/divider/preset/\" + APIService.piHostname).pipe(tap(data => {\n          console.log(data);\n        }), catchError(this.handleError(\"getCurrentPreset\", []))).subscribe({\n          next: data => {\n            const body = data._body;\n            const preset = this.presets.find(p => p.name.toLowerCase() === body.toLowerCase());\n            if (preset != null) {\n              console.log(\"setting initial preset to\", preset);\n              this.panel.preset = preset;\n            } else {\n              console.error(\"current preset response doesn't exist. response: \", data);\n            }\n          },\n          error: err => {\n            console.log(\"failed to get intial preset from divider sensor, trying again...\", err);\n            setTimeout(this.setCurrentPreset, 5000);\n          },\n          complete: () => {\n            console.log(\"complete\");\n          }\n        });\n      });\n      this.api = api;\n      this.socket = socket;\n      this.http = http;\n      this.loaded = new EventEmitter();\n      this.api.loaded.subscribe(() => {\n        this.createInputs();\n        this.createOutputs();\n        this.createPseudoInputs();\n        this.createPresets();\n        this.createPanels();\n        this.inputReachability = APIService.room.config.input_reachability;\n        // set divider sensor\n        this.dividerSensor = APIService.room.config.devices.find(d => d.hasRole(\"DividerSensor\"));\n        if (this.dividerSensor != null) {\n          console.log(\"dividerSensor: \", this.dividerSensor);\n          this.setCurrentPreset();\n        }\n        this.update();\n        this.loaded.emit(true);\n      });\n    }\n    createInputs() {\n      // create real inputs\n      for (const config of APIService.room.uiconfig.inputConfiguration) {\n        const name = config.name.split(\"|\")[0];\n        const input = APIService.room.config.devices.find(i => i.name === name);\n        if (input && input.hasRole(\"VideoIn\")) {\n          const dispname = config.displayname ? config.displayname : input.display_name;\n          const subs = [];\n          console.log(\"does the input have subInputs?\", config);\n          if (config.subInputs !== undefined) {\n            for (const io of config.subInputs) {\n              subs.push(new Input(io.name, io.displayname, io.icon, []));\n            }\n          }\n          this.inputs.push(new Input(config.name, dispname, config.icon, subs));\n        } else {\n          console.warn(\"no input '\" + name + \"' found with role 'VideoIn', skipping it\");\n        }\n      }\n      console.info(\"inputs\", this.inputs);\n    }\n    createOutputs() {\n      // create displays\n      if (APIService.room.uiconfig.outputConfiguration == null) {\n        console.warn(\"missing output configuration. this will probably cause problems on cherry.\");\n      }\n      if (APIService.room.status.displays != null) {\n        for (const status of APIService.room.status.displays) {\n          const config = APIService.room.config.devices.find(d => d.name === status.name);\n          const deviceConfig = APIService.room.uiconfig.outputConfiguration.find(d => d.name === status.name);\n          if (config != null) {\n            if (deviceConfig != null) {\n              let hidden = false;\n              if (config.hasRole(\"hidden\")) {\n                hidden = true;\n              }\n              const d = new Display(status.name, config.display_name, status.power, Input.getInput(status.input, this.inputs), status.blanked, deviceConfig.icon, hidden);\n              this.displays.push(d);\n            } else {\n              console.warn(\"No device configuration found for this display: \", status.name);\n            }\n          } else {\n            console.warn(\"No configuration found for this display:\", status.name);\n          }\n        }\n      }\n      console.info(\"Displays\", this.displays);\n      // create audioDevices\n      if (APIService.room.status.audioDevices != null) {\n        for (const status of APIService.room.status.audioDevices) {\n          const config = APIService.room.config.devices.find(d => d.name === status.name);\n          const deviceConfig = APIService.room.uiconfig.outputConfiguration.find(d => d.name === status.name);\n          if (config != null) {\n            if (deviceConfig != null) {\n              const a = new AudioDevice(status.name, config.display_name, status.power, Input.getInput(status.input, this.inputs), status.muted, status.volume, deviceConfig.icon, config.type._id, 100);\n              this.audioDevices.push(a);\n            } else {\n              console.warn(\"No output configuration for this audio device (check the ui config): \", status.name);\n            }\n          } else {\n            console.warn(\"No configuration found for this audio device:\", status.name);\n          }\n        }\n      }\n      console.info(\"AudioDevices\", this.audioDevices);\n      // create room wide audio map\n      if (APIService.room.uiconfig.audioConfiguration != null) {\n        for (const config of APIService.room.uiconfig.audioConfiguration) {\n          // get display\n          const display = this.displays.find(d => d.name === config.display);\n          const audioDevices = this.audioDevices.filter(a => config.audioDevices.includes(a.name));\n          this.audioConfig.set(display, new AudioConfig(display, audioDevices, config.roomWide));\n        }\n        // fill out rest of audio config\n        for (const preset of APIService.room.uiconfig.presets) {\n          if (preset.audioDevices == null) {\n            console.warn(\"no audio devices found for preset\", preset.name);\n            continue;\n          }\n          const audioDevices = this.audioDevices.filter(a => preset.audioDevices.includes(a.name));\n          for (const display of preset.displays) {\n            const disp = this.displays.find(d => d.name === display);\n            if (!this.audioConfig.has(disp)) {\n              this.audioConfig.set(disp, new AudioConfig(disp, audioDevices, false));\n            }\n          }\n        }\n        console.log(\"AudioConfig\", this.audioConfig);\n      } else {\n        console.warn(\"No AudioConfig present.\");\n      }\n    }\n    createPseudoInputs() {\n      // create pseudo inputs\n      if (APIService.room.uiconfig.pseudoInputs == null) {\n        return;\n      }\n      for (const pi of APIService.room.uiconfig.pseudoInputs) {\n        console.log(\"pseudo input:\", pi);\n      }\n    }\n    createPresets() {\n      for (const preset of APIService.room.uiconfig.presets) {\n        const displays = Device.filterDevices(preset.displays, this.displays);\n        const audioDevices = Device.filterDevices(preset.audioDevices, this.audioDevices);\n        const inputs = Device.filterDevices(preset.inputs, this.inputs);\n        console.log(\"preset:\", preset.name, preset.independentAudioDevices);\n        const independentAudioDevices = Device.filterDevices(preset.independentAudioDevices, this.audioDevices);\n        const audioTypes = new Map();\n        // independentAudioDevices.forEach(a => {\n        //   audioTypes.set(a.type, audioTypes.get(a.type) || []);\n        //   audioTypes.get(a.type).push(a);\n        // });\n        for (const [key, group] of Object.entries(preset.audioGroups)) {\n          const groupDevices = Device.filterDevices(group, this.audioDevices);\n          audioTypes.set(key, groupDevices);\n        }\n        const p = new Preset(preset.name, preset.icon, displays, audioDevices, inputs, preset.shareableDisplays, independentAudioDevices, audioTypes, 30, 30, preset.commands, preset.volumeMatches, preset.cameras, preset.recording);\n        this.presets.push(p);\n      }\n      console.info(\"Presets\", this.presets);\n    }\n    createPanels() {\n      for (const panel of APIService.room.uiconfig.panels) {\n        const preset = this.presets.find(p => p.name === panel.preset);\n        this.panels.push(new Panel(panel.hostname, panel.uipath, preset, panel.features));\n      }\n      console.info(\"pi hostname\", APIService.piHostname);\n      console.info(\"Panels\", this.panels);\n      this.panel = this.panels.find(p => p.hostname === APIService.piHostname);\n      this.panel.render = true;\n      console.info(\"Panel\", this.panel);\n    }\n    update() {\n      this.socket.getEventListener().subscribe(event => {\n        if (event.type === MESSAGE) {\n          const e = event.data;\n          let split = [];\n          if (e.TargetDevice.DeviceID.length > 0) {\n            split = e.TargetDevice.DeviceID.split(\"-\");\n          }\n          if (e.Key.length > 0 && e.Value.length > 0 && split.length === 3) {\n            switch (e.Key) {\n              case POWER:\n                {\n                  let output;\n                  output = this.displays.find(d => d.name === split[2]);\n                  if (output != null) {\n                    output.power = e.Value;\n                  }\n                  output = this.audioDevices.find(a => a.name === split[2]);\n                  if (output != null) {\n                    output.power = e.Value;\n                  }\n                  break;\n                }\n              case INPUT:\n                {\n                  let output;\n                  output = this.displays.find(d => d.name === split[2]);\n                  if (output != null) {\n                    output.input = Input.getInput(e.Value, this.inputs);\n                  }\n                  output = this.audioDevices.find(a => a.name === split[2]);\n                  if (output != null) {\n                    output.input = Input.getInput(e.Value, this.inputs);\n                  }\n                  break;\n                }\n              case BLANKED:\n                {\n                  const display = this.displays.find(d => d.name === split[2]);\n                  if (display != null) {\n                    display.blanked = e.Value.toLowerCase() === \"true\";\n                  }\n                  break;\n                }\n              case MUTED:\n                {\n                  const audioDevice = this.audioDevices.find(a => a.name === split[2]);\n                  if (audioDevice != null) {\n                    audioDevice.muted = e.Value.toLowerCase() === \"true\";\n                  }\n                  break;\n                }\n              case VOLUME:\n                {\n                  const audioDevice = this.audioDevices.find(a => a.name === split[2]);\n                  if (audioDevice != null) {\n                    audioDevice.volume = parseInt(e.Value, 10);\n                  }\n                  break;\n                }\n              case \"master-volume\":\n                {\n                  for (const p of this.presets) {\n                    if (p.name === e.Data) {\n                      p.masterVolume = parseInt(e.Value, 10);\n                      p.masterMute = false;\n                    }\n                    if (p.volumeMatches != null) {\n                      if (p.volumeMatches.includes(e.Data)) {\n                        p.masterVolume = parseInt(e.Value, 10);\n                        p.masterMute = false;\n                      }\n                    }\n                  }\n                  break;\n                }\n              case \"master-mute\":\n                {\n                  for (const p of this.presets) {\n                    if (p.name === e.Data) {\n                      p.masterMute = e.Value.toLowerCase() === \"true\";\n                    }\n                    if (p.volumeMatches != null) {\n                      p.masterMute = e.Value.toLowerCase() === \"true\";\n                    }\n                  }\n                  break;\n                }\n              case \"mix-level\":\n                {\n                  const audioDevice = this.audioDevices.find(a => a.name === split[2]);\n                  if (audioDevice != null) {\n                    audioDevice.mixlevel = parseInt(e.Value, 10);\n                  }\n                  break;\n                }\n              case PRESET_SWITCH:\n                // switch presets\n                if (APIService.piHostname.toLowerCase() !== e.TargetDevice.DeviceID.toLowerCase()) {\n                  break;\n                }\n                const presetName = e.Value.toLowerCase();\n                const preset = this.presets.find(p => p.name.toLowerCase() === presetName);\n                if (preset != null) {\n                  console.log(\"switching preset to: \", preset);\n                  this.panel.preset = preset;\n                }\n                break;\n              default:\n                break;\n            }\n          }\n        }\n      });\n    }\n    getAudioConfigurations(displays) {\n      const audioConfigs = [];\n      for (const display of displays) {\n        const config = this.audioConfig.get(display);\n        if (config != null) {\n          audioConfigs.push(config);\n        }\n      }\n      return audioConfigs;\n    }\n    hasRoomWide(audioConfigs) {\n      for (const config of audioConfigs) {\n        if (config.roomWide) {\n          return true;\n        }\n      }\n      return false;\n    }\n    getInputConfiguration(input) {\n      for (const device of APIService.room.config.devices) {\n        if (device.name === input.name) {\n          return device;\n        }\n      }\n    }\n    handleError(operation = \"operation\", result) {\n      return error => {\n        console.error(\"error doing ${operation}\", error);\n        return of(result);\n      };\n    }\n  }\n  _class = DataService;\n  _defineProperty(DataService, \"\\u0275fac\", function DataService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.APIService), i0.ɵɵinject(i2.SocketService), i0.ɵɵinject(i3.HttpClient));\n  });\n  _defineProperty(DataService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  }));\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}