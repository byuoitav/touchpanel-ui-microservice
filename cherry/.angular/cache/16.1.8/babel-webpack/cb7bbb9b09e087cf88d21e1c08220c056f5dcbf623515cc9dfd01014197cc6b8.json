{"ast":null,"code":"\"use strict\";\n\n/**\n * Storage all serializer metadata.\n */\nvar MetadataStorage = function () {\n  function MetadataStorage() {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n    this._typeMetadatas = [];\n    this._skipMetadatas = [];\n  }\n  // -------------------------------------------------------------------------\n  // Adder Methods\n  // -------------------------------------------------------------------------\n  MetadataStorage.prototype.addTypeMetadata = function (metadata) {\n    this._typeMetadatas.push(metadata);\n  };\n  MetadataStorage.prototype.addSkipMetadata = function (metadata) {\n    this._skipMetadatas.push(metadata);\n  };\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  MetadataStorage.prototype.findSkipMetadata = function (target, propertyName) {\n    var metadataFromTarget = this._skipMetadatas.find(function (meta) {\n      return meta.target === target && meta.key === propertyName;\n    });\n    var metadataFromChildren = this._skipMetadatas.find(function (meta) {\n      return target.prototype instanceof meta.target && meta.key === propertyName;\n    });\n    return metadataFromTarget || metadataFromChildren;\n  };\n  MetadataStorage.prototype.findTypeMetadata = function (target, propertyName) {\n    var metadataFromTarget = this._typeMetadatas.find(function (meta) {\n      return meta.target === target && meta.key === propertyName;\n    });\n    var metadataFromChildren = this._typeMetadatas.find(function (meta) {\n      return target.prototype instanceof meta.target && meta.key === propertyName;\n    });\n    return metadataFromTarget || metadataFromChildren;\n  };\n  return MetadataStorage;\n}();\nexports.MetadataStorage = MetadataStorage;\n/**\n * Default metadata storage is used as singleton and can be used to storage all metadatas.\n */\nexports.defaultMetadataStorage = new MetadataStorage();\n//# sourceMappingURL=MetadataStorage.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}