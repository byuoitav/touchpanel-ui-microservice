{"ast":null,"code":"import _defineProperty from \"/home/orcrist/Desktop/touchpanel-ui-microservice/blueberry/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { of } from \"rxjs\";\nimport { UIConfiguration, Room, RoomConfiguration, RoomStatus } from \"../objects/objects\";\nimport { tap, catchError, map, timeout } from 'rxjs/operators';\nimport { deserialize } from \"serializer.ts/Serializer\";\nimport { JsonConvert } from \"json2typescript\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst RETRY_TIMEOUT = 5 * 1000;\nconst MONITOR_TIMEOUT = 30 * 1000;\nexport let APIService = /*#__PURE__*/(() => {\n  var _class;\n  class APIService {\n    constructor(http) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"loaded\", void 0);\n      _defineProperty(this, \"jsonConvert\", void 0);\n      this.http = http;\n      this.loaded = new EventEmitter();\n      this.jsonConvert = new JsonConvert();\n      this.jsonConvert.ignorePrimitiveChecks = false;\n      if (APIService.options == null) {\n        const headers = new Headers();\n        headers.append(\"content-type\", \"application/json\");\n        APIService.options = {\n          headers: headers\n        };\n        const base = location.origin.split(\":\");\n        APIService.localurl = base[0] + \":\" + base[1];\n        APIService.room = new Room();\n        this.setupHostname();\n      } else {\n        this.loaded.emit(true);\n      }\n    }\n    setupHostname() {\n      this.getHostname().subscribe(data => {\n        APIService.hostname = String(data);\n        this.setupPiHostname();\n      }, err => {\n        setTimeout(() => this.setupHostname(), RETRY_TIMEOUT);\n      });\n    }\n    // hostname, building, room\n    setupPiHostname() {\n      this.getPiHostname().subscribe(data => {\n        APIService.piHostname = String(data);\n        const split = APIService.piHostname.split(\"-\");\n        APIService.building = split[0];\n        APIService.roomName = split[1];\n        this.setupAPIUrl(false);\n      }, err => {\n        setTimeout(() => this.setupPiHostname(), RETRY_TIMEOUT);\n      });\n    }\n    setupAPIUrl(next) {\n      if (next) {\n        console.warn(\"switching to next api\");\n        this.getNextAPIUrl().subscribe(data => {}, err => {\n          setTimeout(() => this.setupAPIUrl(next), RETRY_TIMEOUT);\n        });\n      }\n      this.getAPIUrl().subscribe(data => {\n        APIService.apihost = \"http://\" + location.hostname;\n        if (!data[\"hostname\"].includes(\"localhost\")) {\n          APIService.apihost = \"http://\" + data[\"hostname\"];\n        }\n        APIService.apiurl = APIService.apihost + \":8000/buildings/\" + APIService.building + \"/rooms/\" + APIService.roomName;\n        console.info(\"API url:\", APIService.apiurl);\n        if (!next) {\n          this.setupUIConfig();\n        }\n      }, err => {\n        setTimeout(() => this.setupAPIUrl(next), RETRY_TIMEOUT);\n      });\n    }\n    monitorAPI() {\n      this.getAPIHealth().subscribe(data => {\n        if (data[\"statuscode\"] !== 0) {\n          this.setupAPIUrl(true);\n        }\n        setTimeout(() => this.monitorAPI(), MONITOR_TIMEOUT);\n      }, err => {\n        this.setupAPIUrl(true);\n        setTimeout(() => this.monitorAPI(), MONITOR_TIMEOUT);\n      });\n    }\n    setupUIConfig() {\n      this.getUIConfig().subscribe(data => {\n        APIService.room.uiconfig = new UIConfiguration();\n        Object.assign(APIService.room.uiconfig, data);\n        console.info(\"UI Configuration:\", APIService.room.uiconfig);\n        this.setupHelpConfig();\n      }, err => {\n        setTimeout(() => this.setupUIConfig(), RETRY_TIMEOUT);\n      });\n    }\n    setupHelpConfig() {\n      this.getHelpConfig().subscribe(data => {\n        APIService.helpConfig = new Object();\n        Object.assign(APIService.helpConfig, data);\n        console.info(\"help config\", APIService.helpConfig);\n        this.setupRoomConfig();\n      }, err => {\n        setTimeout(() => this.setupHelpConfig(), RETRY_TIMEOUT);\n      });\n    }\n    setupRoomConfig() {\n      this.getRoomConfig().subscribe(data => {\n        APIService.room.config = new RoomConfiguration();\n        Object.assign(APIService.room.config, data);\n        console.info(\"Room Configuration:\", APIService.room.config);\n        this.setupRoomStatus();\n      }, err => {\n        setTimeout(() => this.setupRoomConfig(), RETRY_TIMEOUT);\n      });\n    }\n    setupRoomStatus() {\n      this.getRoomStatus().subscribe(data => {\n        APIService.room.status = new RoomStatus();\n        Object.assign(APIService.room.status, data);\n        console.info(\"Room Status:\", APIService.room.status);\n        this.loaded.emit(true);\n      }, err => {\n        setTimeout(() => this.setupRoomStatus(), RETRY_TIMEOUT);\n      });\n    }\n    get(url, success = func => {}, err = func => {}, after = func => {}) {\n      this.http.get(url).pipe(tap(data => console.log(\"got data\", data)), catchError(this.handleError('get', [])));\n    }\n    getHostname() {\n      return this.http.get(APIService.localurl + \":8888/hostname\").pipe(tap(data => console.log(\"got hostname\", data)), catchError(this.handleError('getHostname', [])));\n    }\n    getPiHostname() {\n      return this.http.get(APIService.localurl + \":8888/pihostname\").pipe(tap(data => console.log(\"got pi hostname\", data)), catchError(this.handleError('getPiHostname', [])));\n    }\n    getAPIUrl() {\n      return this.http.get(APIService.localurl + \":8888./api\").pipe(tap(data => console.log(\"got api url\", data)), catchError(this.handleError('getAPIUrl', [])));\n    }\n    getAPIHealth() {\n      return this.http.get(APIService.apihost + \":8000/mstatus\").pipe(timeout(RETRY_TIMEOUT), tap(data => console.log(\"got api health\", data)), catchError(this.handleError('getAPIHealth', [])));\n    }\n    getNextAPIUrl() {\n      return this.http.get(APIService.localurl + \":8888/nextapi\").pipe(tap(data => console.log(\"got next api url\", data)), catchError(this.handleError('getNextAPIUrl', [])));\n    }\n    getUIConfig() {\n      return this.http.get(APIService.localurl + \":8888/uiconfig\").pipe(tap(data => console.log(\"got ui config\", data)), map(res => deserialize(UIConfiguration, res)), map(res => UIConfiguration), catchError(this.handleError('getUIConfig', [])));\n    }\n    getHelpConfig() {\n      return this.http.get(APIService.localurl + \":8888/blueberry/db/help.json\").pipe(tap(data => console.log(\"got help config\", data)), catchError(this.handleError('getHelpConfig', [])));\n    }\n    getRoomConfig() {\n      return this.http.get(APIService.apiurl + \"/configuration\").pipe(tap(data => console.log(\"got room config\", data)), map(res => deserialize(RoomConfiguration, res)), catchError(this.handleError('getRoomConfig', [])));\n    }\n    getRoomStatus() {\n      return this.http.get(APIService.apiurl).pipe(tap(data => console.log(\"got room status\", data)), map(res => deserialize(RoomStatus, res)), catchError(this.handleError('getRoomStatus', [])));\n    }\n    sendEvent(event) {\n      const data = this.jsonConvert.serializeObject(event);\n      console.log(\"sending event\", data);\n      this.http.post(APIService.localurl + \":8888/publish\", data, APIService.options).pipe(tap(data => console.log(\"sent event\", data)), catchError(this.handleError('sendEvent', [])));\n    }\n    help(type) {\n      const body = {\n        building: APIService.building,\n        room: APIService.roomName\n      };\n      switch (type) {\n        case \"help\":\n          return this.http.post(APIService.localurl + \":8888/help\", body, APIService.options).pipe(tap(data => console.log(\"sent help\", data)), catchError(this.handleError('help', [])));\n        case \"confirm\":\n          return this.http.post(APIService.localurl + \":8888/confirmhelp\", body, APIService.options).pipe(tap(data => console.log(\"sent confirm help\", data)), catchError(this.handleError('help', [])));\n        case \"cancel\":\n          return this.http.post(APIService.localurl + \":8888/cancelhelp\", body, APIService.options).pipe(tap(data => console.log(\"sent cancel help\", data)), catchError(this.handleError('help', [])));\n      }\n    }\n    handleError(operation = \"operation\", result) {\n      return error => {\n        console.error(\"error doing ${operation}\", error);\n        return of(result);\n      };\n    }\n  }\n  _class = APIService;\n  _defineProperty(APIService, \"building\", void 0);\n  _defineProperty(APIService, \"roomName\", void 0);\n  _defineProperty(APIService, \"piHostname\", void 0);\n  _defineProperty(APIService, \"hostname\", void 0);\n  _defineProperty(APIService, \"apiurl\", void 0);\n  _defineProperty(APIService, \"room\", void 0);\n  _defineProperty(APIService, \"helpConfig\", void 0);\n  _defineProperty(APIService, \"apihost\", void 0);\n  _defineProperty(APIService, \"localurl\", void 0);\n  _defineProperty(APIService, \"options\", void 0);\n  _defineProperty(APIService, \"\\u0275fac\", function APIService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  });\n  _defineProperty(APIService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  }));\n  return APIService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}