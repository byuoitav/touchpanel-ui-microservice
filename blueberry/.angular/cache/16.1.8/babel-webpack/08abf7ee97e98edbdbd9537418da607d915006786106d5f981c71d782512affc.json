{"ast":null,"code":"import _asyncToGenerator from \"/home/orcrist/Desktop/touchpanel-ui-microservice/blueberry/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/orcrist/Desktop/touchpanel-ui-microservice/blueberry/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { WheelComponent } from \"./wheel.component\";\nimport { DataService } from \"../services/data.service\";\nimport { CommandService } from \"../services/command.service\";\nimport { APIService } from \"../services/api.service\";\nimport { GraphService } from \"../services/graph.service\";\nimport { SocketService, MESSAGE, Event, BasicDeviceInfo, BasicRoomInfo } from \"../services/socket.service\";\nimport { Preset } from \"../objects/objects\";\nimport { INPUT, Input, POWER, POWER_OFF_ALL } from \"../objects/status.objects\";\nimport { HelpModal } from \"../modals/helpmodal/helpmodal.component\";\nimport { PowerOffAllModalComponent } from \"../modals/poweroffallmodal/poweroffallmodal.component\";\nimport { ShareModalComponent } from \"../modals/sharemodal/sharemodal.component\";\nimport { AudioComponent } from \"./audio/audio.component\";\nimport { MirrorModalComponent } from \"../modals/mirrormodal/mirrormodal.component\";\nimport { MessageModalComponent } from \"../modals/messagemodal/messagemodal.component\";\nimport { StreamModalComponent } from \"app/modals/streammodal/streammodal.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/data.service\";\nimport * as i2 from \"../services/socket.service\";\nimport * as i3 from \"../services/api.service\";\nimport * as i4 from \"../services/command.service\";\nimport * as i5 from \"../services/graph.service\";\nimport * as i6 from \"@angular/material/dialog\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"./wheel.component\";\nimport * as i11 from \"./audio/audio.component\";\nfunction HomeComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"wheel\", 9);\n    i0.ɵɵlistener(\"init\", function HomeComponent_div_9_Template_wheel_init_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onWheelInit());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"sharing\", (ctx_r1.wheel == null ? null : ctx_r1.wheel.preset) === ctx_r1.sharePreset)(\"openControlledByPower\", true)(\"blur\", false)(\"preset\", ctx_r1.data.panel.preset);\n  }\n}\nfunction HomeComponent_ng_container_11_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function HomeComponent_ng_container_11_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      ctx_r8.showShareModal();\n      return i0.ɵɵresetView(ctx_r8.command.buttonPress(\"open share modal\"));\n    })(\"press\", function HomeComponent_ng_container_11_button_1_Template_button_press_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      ctx_r10.showShareModal();\n      return i0.ɵɵresetView(ctx_r10.command.buttonPress(\"long press open share modal\"));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"screen_share\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    i0.ɵɵclassProp(\"grey\", (ctx_r6.wheel == null ? null : (tmp_0_0 = ctx_r6.wheel.getInput()) == null ? null : tmp_0_0.reachableDisplays == null ? null : tmp_0_0.reachableDisplays.length) <= 1);\n  }\n}\nfunction HomeComponent_ng_container_11_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function HomeComponent_ng_container_11_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      ctx_r11.unshare(ctx_r11.defaultPreset, ctx_r11.mirroringMe);\n      return i0.ɵɵresetView(ctx_r11.command.buttonPress(\"unshare\"));\n    })(\"press\", function HomeComponent_ng_container_11_button_2_Template_button_press_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      ctx_r13.unshare(ctx_r13.defaultPreset, ctx_r13.mirroringMe);\n      return i0.ɵɵresetView(ctx_r13.command.buttonPress(\"long press unshare\"));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"stop_screen_share\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction HomeComponent_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, HomeComponent_ng_container_11_button_1_Template, 3, 2, \"button\", 10);\n    i0.ɵɵtemplate(2, HomeComponent_ng_container_11_button_2_Template, 3, 0, \"button\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.wheel == null ? null : ctx_r2.wheel.preset) == ctx_r2.defaultPreset);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.wheel == null ? null : ctx_r2.wheel.preset) != ctx_r2.defaultPreset);\n  }\n}\nfunction HomeComponent_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function HomeComponent_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(1);\n      _r0.show(ctx_r14.defaultPreset);\n      return i0.ɵɵresetView(ctx_r14.command.buttonPress(\"open audio modal\"));\n    })(\"press\", function HomeComponent_button_13_Template_button_press_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(1);\n      _r0.show(ctx_r16.defaultPreset);\n      return i0.ɵɵresetView(ctx_r16.command.buttonPress(\"long press open audio modal\"));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 14);\n    i0.ɵɵtext(2, \"tune\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport const SHARE = \"start_share\";\nexport const STOP_SHARE = \"stop_share\";\nexport const LEAVE_SHARE = \"leave_share\";\nexport const JOIN_SHARE = \"join_share\";\n/*\n * This is where the logic for sharing lives.\n *\n * To start sharing, send an event:\n *      {\n *          requestor: the name of the preset that is sharing,\n *          device: list of displays you are sharing to,\n *          Key: SHARE,\n *      }\n * Actions a minion takes upon receiving a SHARE event that applies to them:\n *      - show a modal window that blocks user from pressing anything other than stop\n *          - when stop is pressed, a minion sends a STOP_MIRRORING event (described below)\n *      - save the name of the preset that is controlling you\n *\n *\n * To stop sharing:\n *      {\n *          requestor: the name of the preset that is stopping sharing,\n *          device: list of displays that you are still controlling (bc some may have left),\n *          Key: STOP_SHARE,\n *      }\n * Actions a minion takes upon receiving a STOP_SHARE event that applies to them:\n *      - delete any extra inputs that have been created\n *      - remove the modal window\n *\n *\n * If you are a minion, and want the master to stop controlling your displays, send:\n *      {\n *          requestor: the name of the preset that is controlling you,\n *          device: list of the displays you want removed from being controlled (i.e. your displays),\n *          Key: LEAVE_SHARE\n *      }\n *      also, unmute/unblank yourself.\n * Actions a minion takes upon receiving a LEAVE_SHARE event:\n *      - if the displays in *device* match its displays\n *          - unmute/unblank\n *          - switch back to my local input (?)\n * Actions a master takes upon receiving a LEAVE_SHARE event:\n *      -   remove each display in *device* field from current preset\n *          - if a roomWideAudio was removed:\n *              - change sharePreset.audioDevices to be your default preset's audioDevices\n *              - unmute your audioDevices\n *\n *\n * If you are a minion who has left the group, and would like to rejoin, send:\n *      {\n *          requestor: the name of the preset who is requesting me to join the group\n *          device: list of displays you want to be controlled,\n *          Key: JOIN_SHARE\n *          Value: the name of the preset that that started the group,\n *      }\n *      also show the same modal window that appears when receiving a SHARE event\n *      and lookup the status of the preset you would like to join, and mirror that.\n * Actions a minion takes upon receiving a JOIN_SHARE event:\n *      - if their displays are in the *device* field\n *          - lookup the status of the preset defined in the requestor field, and mirror that\n *          - show the SHARE modal window\n * Actions a master takes upon receiving a JOIN_SHARE event:\n *      - add each display from *device* into the current preset.\n *          - if a roomWideAudio was added:\n *              - change sharePreset.audioDevices to be the roomWideAudio.\n *              - mute everything that isn't a roomWideAudio\n */\nexport let HomeComponent = /*#__PURE__*/(() => {\n  var _class;\n  class HomeComponent {\n    constructor(data, socket, api, command, graph, _dialog) {\n      var _this = this;\n      _defineProperty(this, \"data\", void 0);\n      _defineProperty(this, \"socket\", void 0);\n      _defineProperty(this, \"api\", void 0);\n      _defineProperty(this, \"command\", void 0);\n      _defineProperty(this, \"graph\", void 0);\n      _defineProperty(this, \"dialog\", void 0);\n      _defineProperty(this, \"wheel\", void 0);\n      _defineProperty(this, \"audio\", void 0);\n      _defineProperty(this, \"sharePreset\", void 0);\n      _defineProperty(this, \"defaultPreset\", void 0);\n      _defineProperty(this, \"mirroringMe\", []);\n      _defineProperty(this, \"helpInfo\", void 0);\n      _defineProperty(this, \"turnOff\", () => {\n        const ret = new EventEmitter();\n        if (this.wheel.preset === this.sharePreset) {\n          // unshare first\n          this.unshare(this.defaultPreset, this.mirroringMe).subscribe(success => {\n            if (success) {\n              // power off this preset\n              this.wheel.command.powerOff(this.wheel.preset).subscribe(successTwo => {\n                if (successTwo) {\n                  this.wheel.close();\n                  ret.emit(true);\n                } else {\n                  console.warn(\"failed to power off preset\");\n                  ret.emit(false);\n                }\n              });\n            } else {\n              console.warn(\"failed to unshare to turn off preset.\");\n              ret.emit(false);\n            }\n          });\n        } else {\n          // power off this preset.\n          this.wheel.command.powerOff(this.wheel.preset).subscribe(success => {\n            if (success) {\n              this.wheel.close();\n              ret.emit(true);\n            } else {\n              console.warn(\"failed to power off preset\");\n              ret.emit(false);\n            }\n          });\n        }\n        return ret;\n      });\n      _defineProperty(this, \"buildSharePreset\", (from, to) => {\n        // create a new preset that controls what i should control now\n        let displays = from.displays.slice();\n        to.forEach(p => displays.push(...p.displays));\n        displays = Array.from(new Set(displays));\n        const audioDevices = from.audioDevices.slice();\n        const audioConfigs = this.data.getAudioConfigurations(displays);\n        if (this.data.hasRoomWide(audioConfigs)) {\n          audioDevices.length = 0;\n          for (const config of audioConfigs) {\n            if (config.roomWide) {\n              audioDevices.push(...config.audioDevices);\n            }\n          }\n        }\n        // build the new preset\n        return new Preset(\"Sharing\", \"subscriptions\", displays, Array.from(new Set(audioDevices)), from.inputs, from.shareablePresets, from.independentAudioDevices, from.commands);\n      });\n      _defineProperty(this, \"share\", (from, to) => {\n        return /*#__PURE__*/_asyncToGenerator(function* () {\n          return new Promise((resolve, reject) => {\n            console.log(\"sharing from\", from, \"to\", to);\n            // if you share, you can't go back to and old group anymore\n            _this.removeExtraInputs();\n            const preset = _this.buildSharePreset(from, to);\n            console.log(\"share preset\", preset);\n            _this.command.share(from, to).subscribe(success => {\n              if (success) {\n                _this.mirroringMe.push(...to);\n                _this.sharePreset = preset;\n                _this.changePreset(_this.sharePreset);\n                const event = new Event();\n                event.User = from.name;\n                event.EventTags = [\"ui-communication\"];\n                event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n                event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n                event.Key = SHARE;\n                event.Value = \" \";\n                event.Data = _this.mirroringMe.map(p => p.name);\n                _this.api.sendEvent(event);\n              }\n              resolve(success);\n            });\n          });\n        });\n      });\n      // from should be the default preset, to should be the list of presets i'm sharing to\n      _defineProperty(this, \"unshare\", (from, to) => {\n        const ret = new EventEmitter();\n        console.log(\"unsharing from\", from, \"to\", to);\n        // show the unshare popup\n        const ref = this.showMessageModal(\"Returning room to default state...\", undefined, true, undefined);\n        this.command.unshare(from, to).subscribe(success => {\n          if (success) {\n            this.changePreset(from);\n            this.mirroringMe = this.mirroringMe.filter(p => !to.includes(p));\n            const event = new Event();\n            event.User = from.name;\n            event.EventTags = [\"ui-communication\"];\n            event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n            event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n            event.Key = STOP_SHARE;\n            event.Value = \" \";\n            event.Data = to.map(p => p.name);\n            this.api.sendEvent(event);\n          }\n          ref.close();\n          ret.emit(success);\n        });\n        return ret;\n      });\n      _defineProperty(this, \"mirror\", preset => {\n        const input = this.buildMirrorInput(preset);\n        const ref = this.showMirrorModal(input);\n        console.log(\"mirroring\", preset.name);\n        if (this.wheel.preset === this.sharePreset) {\n          console.log(\"switching to default preset\");\n          this.changePreset(this.defaultPreset);\n        }\n        this.command.mirror(this.defaultPreset, preset).subscribe(success => {\n          if (success) {\n            // tell panels mirroring me to show that they are mirroring them too\n            const event = new Event();\n            event.User = this.defaultPreset.name;\n            event.EventTags = [\"ui-communication\"];\n            event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n            event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n            event.Key = JOIN_SHARE;\n            event.Value = preset.name;\n            event.Data = [this.defaultPreset.name];\n            this.api.sendEvent(event);\n          }\n        });\n        this.removeExtraInputs();\n        this.defaultPreset.extraInputs.push(input);\n      });\n      _defineProperty(this, \"buildMirrorInput\", preset => {\n        const currInput = this.wheel.getInput();\n        if (currInput != null) {\n          const input = new Input(currInput.name, preset.name, currInput.icon, currInput.reachableDisplays, currInput.subInputs);\n          input.click.subscribe(() => {\n            this.command.buttonPress(\"remirror\", preset.name);\n            this.mirror(preset);\n          });\n          return input;\n        } else {\n          console.warn(\"failed to find a current input for preset:\", preset);\n          return undefined;\n        }\n      });\n      _defineProperty(this, \"removeMirrorPopup\", () => {\n        for (const dialog of this.dialog.openDialogs) {\n          if (dialog.componentInstance instanceof MirrorModalComponent) {\n            dialog.close();\n          }\n        }\n      });\n      _defineProperty(this, \"unmirror\", () => {\n        return /*#__PURE__*/_asyncToGenerator(function* () {\n          return new Promise((resolve, reject) => {\n            console.log(\"unmirroring\");\n            // switch the input back to default\n            _this.command.powerOnDefault(_this.defaultPreset).subscribe(success => {\n              const event = new Event();\n              event.User = _this.defaultPreset.name;\n              event.EventTags = [\"ui-communication\"];\n              event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n              event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n              event.Key = LEAVE_SHARE;\n              event.Value = _this.defaultPreset.name;\n              event.Data = [_this.defaultPreset.name];\n              _this.api.sendEvent(event);\n              resolve(success);\n              _this.removeMirrorPopup();\n            });\n          });\n        });\n      });\n      _defineProperty(this, \"removeFromShare\", presets => {\n        if (this.wheel.preset !== this.sharePreset) {\n          console.warn(\"trying to remove\", presets, \"from my share group, but i'm not currently sharing\");\n          return;\n        }\n        // only keep displays that i'm mirroring to\n        const trash = [];\n        for (const preset of presets) {\n          trash.push(...preset.displays);\n        }\n        this.sharePreset.displays = this.sharePreset.displays.filter(disp => !trash.some(d => d.name === disp.name));\n        this.sharePreset = this.fixAudio(this.sharePreset);\n        console.log(\"new share preset\", this.sharePreset);\n      });\n      // the presets have already set their inputs to match mine\n      _defineProperty(this, \"addToShare\", presets => {\n        if (this.wheel.preset !== this.sharePreset) {\n          console.warn(\"trying to add\", presets, \"to my share group, but i'm not currently sharing\");\n          return;\n        }\n        console.log(\"adding\", presets, \"to my share group\");\n        this.mirroringMe.push(...presets);\n        for (const preset of presets) {\n          this.sharePreset.displays.push(...preset.displays);\n        }\n        this.sharePreset = this.fixAudio(this.sharePreset);\n        console.log(\"new share preset\", this.sharePreset);\n      });\n      _defineProperty(this, \"fixAudio\", preset => {\n        const audioConfigs = this.data.getAudioConfigurations(preset.displays);\n        const hasRoomWide = this.data.hasRoomWide(audioConfigs);\n        if (hasRoomWide) {\n          const tomute = [];\n          audioConfigs.filter(config => !config.roomWide).forEach(config => tomute.push(...config.audioDevices));\n          // mute all the non-roomwide audio devices, unmute the room wide audios\n          this.command.setMute(true, tomute);\n          // unmute all the roomwide audio devices, set their volume to 30\n          preset.audioDevices.length = 0;\n          audioConfigs.filter(config => config.roomWide).forEach(config => preset.audioDevices.push(...config.audioDevices));\n        } else {\n          // make sure audio is coming from my preset\n          preset.audioDevices = this.defaultPreset.audioDevices;\n        }\n        this.command.setVolume(30, preset.audioDevices);\n        this.command.setMute(false, preset.audioDevices);\n        return preset;\n      });\n      this.data = data;\n      this.socket = socket;\n      this.api = api;\n      this.command = command;\n      this.graph = graph;\n      this.dialog = _dialog;\n      this.data.loaded.subscribe(() => {\n        this.updateFromEvents();\n        this.setupInputFunctions();\n        this.updateHelp();\n      });\n    }\n    ngOnInit() {}\n    setupInputFunctions() {\n      console.log(\"setting up input functions\");\n      for (const i of this.data.inputs) {\n        // define what happens when the input is clicked\n        i.click.subscribe(() => {\n          if (this.wheel.preset === this.sharePreset && i.reachableDisplays.length === 1) {\n            this.showMessageModal(undefined, \"You must unshare before you can select this input.\", false, \"Ok\");\n            return;\n          }\n          if (i.subInputs !== undefined && i.subInputs.length > 0) {\n            this.dialog.open(StreamModalComponent, {\n              data: i\n            }).afterClosed().subscribe(theChosenOne => {\n              if (theChosenOne !== undefined) {\n                const input = theChosenOne;\n                this.command.setInput(input, this.wheel.preset.displays);\n              }\n              return;\n            });\n          } else {\n            console.log(\"no sub inputs\");\n            this.command.setInput(i, this.wheel.preset.displays);\n          }\n        });\n      }\n    }\n    onWheelInit() {\n      this.defaultPreset = this.wheel.preset;\n      if (this.wheel.getPower() === \"on\") {\n        this.wheel.open(false, 500);\n      }\n    }\n    turnOn() {\n      const ret = this.wheel.command.powerOnDefault(this.wheel.preset);\n      ret.subscribe(success => {\n        if (success) {\n          this.wheel.open(false, 200);\n        }\n      });\n      return ret;\n    }\n    updateFromEvents() {\n      this.socket.getEventListener().subscribe(event => {\n        if (event.type === MESSAGE) {\n          const e = event.data;\n          let split = [];\n          if (e.TargetDevice !== undefined) {\n            split = e.TargetDevice.DeviceID.split(\"-\");\n          }\n          if (e.Value.length > 0 && split.length === 3) {\n            switch (e.Key) {\n              case POWER:\n                if (e.Value === \"standby\" && this.wheel.preset.displays.find(d => d.name === split[2])) {\n                  this.dialog.closeAll();\n                  this.removeExtraInputs();\n                }\n                break;\n              case INPUT:\n                if (this.defaultPreset.extraInputs.length > 0) {\n                  const input = Input.getInput(e.Value, this.data.inputs);\n                  if (!this.defaultPreset.inputs.includes(input)) {\n                    console.log(\"updating extra input name/icon with: \", input);\n                    this.defaultPreset.extraInputs[0].name = input.name;\n                    this.defaultPreset.extraInputs[0].icon = input.icon;\n                  }\n                }\n                break;\n              case SHARE:\n                if (e.User === this.defaultPreset.name) {\n                  console.log(\"a panel i'm mirroring (\" + e.User + \") just shared to\", e.Value);\n                  // someone who's panel i'm supposed to mirror just shared.\n                  // so i should look like i'm sharing too!\n                  const presets = [];\n                  for (const name of e.Data) {\n                    const preset = this.data.presets.find(p => p.name === name);\n                    if (preset) {\n                      presets.push(preset);\n                    }\n                  }\n                  this.sharePreset = this.buildSharePreset(this.defaultPreset, presets);\n                  this.changePreset(this.sharePreset);\n                  this.mirroringMe = presets;\n                } else if (this.appliesToMe(e.Data)) {\n                  console.log(e.User, \"just shared to me\");\n                  if (this.wheel.preset === this.sharePreset) {\n                    console.log(\"and i'm already sharing to a group.\");\n                    // e.User just shared to me, but I'm already sharing to a group.\n                    // the preset who just shared to me should absorb my group.\n                    const presetsToMirror = [];\n                    this.mirroringMe.filter(p => !e.Data.includes(p.name)).forEach(p => presetsToMirror.push(p.name));\n                    if (presetsToMirror.length > 0) {\n                      const eve = new Event();\n                      eve.User = this.defaultPreset.name;\n                      eve.EventTags = [\"ui-communication\"];\n                      eve.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n                      eve.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n                      eve.Key = JOIN_SHARE;\n                      eve.Value = e.User;\n                      eve.Data = this.mirroringMe.filter(p => !e.Data.includes(p.name)).map(p => p.name);\n                      this.api.sendEvent(eve);\n                    }\n                    this.changePreset(this.defaultPreset);\n                  }\n                  // someone shared to me. i should look like a minion.\n                  const preset = this.data.presets.find(p => p.name === e.User);\n                  const input = this.buildMirrorInput(preset);\n                  this.removeExtraInputs();\n                  this.defaultPreset.extraInputs.push(input);\n                  // show the popup\n                  this.showMirrorModal(input);\n                } else if (this.appliesToMyGroup(e.Data)) {\n                  // a preset that i previously shared to have been shared to by a new station.\n                  // they should be removed from my mirroringMe group so that\n                  // i don't send an unshare event to them.\n                  console.log(e.User, \"just shared to preset(s) that i was sharing to\");\n                  this.mirroringMe = this.mirroringMe.filter(p => !e.Data.includes(p.name));\n                  if (this.mirroringMe.length === 0) {\n                    console.log(\"i'm no longer sharing to any displays. :(\");\n                    this.changePreset(this.defaultPreset);\n                  } else {\n                    console.log(\"presets still mirroring me after removing them:\", this.mirroringMe);\n                  }\n                }\n                break;\n              case STOP_SHARE:\n                console.log(\"got unshare event, unshared to \", e.Data);\n                if (this.wheel.preset === this.sharePreset && e.User === this.defaultPreset.name) {\n                  console.log(\"a panel i'm mirroring just unshared\");\n                  // someone who's panel i'm mirroring just unshared.\n                  this.changePreset(this.defaultPreset);\n                } else if (this.appliesToMe(e.Data)) {\n                  console.log(e.User, \"just stopped sharing with me\");\n                  this.removeExtraInputs();\n                  this.removeMirrorPopup();\n                }\n                break;\n              case LEAVE_SHARE:\n                if (this.appliesToMe(e.Data)) {\n                  console.log(\"a panel i'm mirroring just left our share group\");\n                  // someone who's panel i'm mirroring just left a group\n                  this.removeMirrorPopup();\n                } else if (this.mirroringMe.some(p => p.name === e.User)) {\n                  // someone i'm mirroring to left my group\n                  console.log(e.User, \"has left my group\");\n                  const preset = this.data.presets.find(p => p.name === e.User);\n                  this.removeFromShare([preset]);\n                }\n                break;\n              case JOIN_SHARE:\n                if (this.wheel.preset === this.sharePreset && e.Value === this.defaultPreset.name) {\n                  // someone wants to join *my* group\n                  const presets = this.data.presets.filter(p => {\n                    return e.Data.includes(p.name) && !this.mirroringMe.includes(p);\n                  });\n                  if (presets.length > 0) {\n                    console.log(presets, \"are joining my group at the request of\", e.User);\n                    this.addToShare(presets);\n                  }\n                } else if (e.User === this.defaultPreset.name) {\n                  console.log(\"a panel i'm mirroring just rejoined\", e.Value + \"'s group.\");\n                  // a panel i'm mirroring just rejoined a group\n                  const preset = this.data.presets.find(p => p.name === e.Value);\n                  const input = this.buildMirrorInput(preset);\n                  this.removeExtraInputs();\n                  this.defaultPreset.extraInputs.push(input);\n                } else if (this.appliesToMe(e.Data)) {\n                  console.log(e.User, \"wants me to join a \", e.Value + \"'s group.\");\n                  // someone wants me to join a group\n                  const preset = this.data.presets.find(p => p.name === e.Value);\n                  this.mirror(preset); // TODO i might not want to send the event here, but lets test it\n                }\n\n                break;\n              case POWER_OFF_ALL:\n                this.removeExtraInputs();\n                this.dialog.closeAll();\n                if (this.sharePreset === this.wheel.preset) {\n                  this.unshare(this.defaultPreset, this.mirroringMe).subscribe(success => {\n                    this.changePreset(this.defaultPreset);\n                    this.command.powerOffAll();\n                  });\n                }\n                break;\n            }\n          } else {\n            console.warn(\"<home component> invalid event: \", e);\n          }\n        }\n      });\n    }\n    appliesToMe(listOfPresetNames) {\n      return listOfPresetNames.includes(this.defaultPreset.name);\n    }\n    appliesToMyGroup(listOfPresetNames) {\n      return this.mirroringMe.some(p => listOfPresetNames.includes(p.name));\n    }\n    removeExtraInputs() {\n      this.wheel.preset.extraInputs.length = 0;\n      this.defaultPreset.extraInputs.length = 0;\n      setTimeout(() => this.wheel.render(), 0);\n    }\n    changePreset(newPreset) {\n      console.log(\"changing preset to\", newPreset);\n      this.wheel.preset = newPreset;\n      setTimeout(() => this.wheel.render(), 0);\n    }\n    updateHelp() {\n      this.helpInfo = this.getHelp();\n      console.log(\"updated help info\", this.helpInfo);\n      setInterval(() => {\n        this.helpInfo = this.getHelp();\n        console.log(\"updated help info\", this.helpInfo);\n      }, 1 * 60 * 1000);\n    }\n    getHelp() {\n      const date = new Date();\n      const dayOfTheWeek = date.getDay();\n      const CurrentHour = date.getHours();\n      let dayOfWeekString = \"sunday\";\n      switch (dayOfTheWeek) {\n        case 1:\n          dayOfWeekString = \"monday\";\n          break;\n        case 2:\n          dayOfWeekString = \"tuesday\";\n          break;\n        case 3:\n          dayOfWeekString = \"wednesday\";\n          break;\n        case 4:\n          dayOfWeekString = \"thursday\";\n          break;\n        case 5:\n          dayOfWeekString = \"friday\";\n          break;\n        case 6:\n          dayOfWeekString = \"saturday\";\n          break;\n        default:\n          break;\n      }\n      const ret = {\n        msg: \"\",\n        showConfirm: false\n      };\n      if (APIService.helpConfig == null) {\n        ret.msg = \"Unable to get help message.\";\n        return ret;\n      } else if (APIService.helpConfig[\"helpHours\"][dayOfWeekString] == null) {\n        ret.msg = \"Help hours are not defined for \" + dayOfWeekString + \".\";\n        return ret;\n      }\n      if (APIService.helpConfig[\"helpHours\"][dayOfWeekString].open && CurrentHour >= APIService.helpConfig[\"helpHours\"][dayOfWeekString].from && CurrentHour < APIService.helpConfig[\"helpHours\"][dayOfWeekString].to) {\n        ret.msg = APIService.helpConfig[\"helpMessage\"][\"workHours\"];\n        ret.showConfirm = true;\n        return ret;\n      } else {\n        ret.msg = APIService.helpConfig[\"helpMessage\"][\"afterHours\"];\n      }\n      return ret;\n    }\n    showHelp() {\n      const ref = this.dialog.open(HelpModal, {\n        width: \"80vw\",\n        data: this.helpInfo,\n        disableClose: true\n      });\n    }\n    showPowerOffDialog() {\n      const ref = this.dialog.open(PowerOffAllModalComponent, {\n        width: \"80vw\",\n        disableClose: true,\n        data: this.turnOff\n      });\n    }\n    showShareModal() {\n      const ref = this.dialog.open(ShareModalComponent, {\n        width: \"80vw\",\n        disableClose: true,\n        data: {\n          wheel: this.wheel,\n          share: this.share\n        }\n      });\n    }\n    /*\n    public showAudioModal() {\n      const ref = this.dialog.open(AudioModalComponent, {\n        width: \"80vw\",\n        disableClose: true,\n        data: this.defaultPreset\n      });\n    }\n    */\n    showMessageModal(title, message, showSpinner, closeText) {\n      return this.dialog.open(MessageModalComponent, {\n        width: \"80vw\",\n        disableClose: true,\n        data: {\n          title: title,\n          message: message,\n          showSpinner: showSpinner,\n          closeText: closeText\n        }\n      });\n    }\n    showMirrorModal(input) {\n      return this.dialog.open(MirrorModalComponent, {\n        width: \"80vw\",\n        disableClose: true,\n        data: {\n          preset: this.defaultPreset,\n          audio: this.audio,\n          input: input,\n          unmirror: this.unmirror\n        }\n      });\n    }\n  }\n  _class = HomeComponent;\n  _defineProperty(HomeComponent, \"\\u0275fac\", function HomeComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.SocketService), i0.ɵɵdirectiveInject(i3.APIService), i0.ɵɵdirectiveInject(i4.CommandService), i0.ɵɵdirectiveInject(i5.GraphService), i0.ɵɵdirectiveInject(i6.MatDialog));\n  });\n  _defineProperty(HomeComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"home\"]],\n    viewQuery: function HomeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(WheelComponent, 5);\n        i0.ɵɵviewQuery(AudioComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wheel = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.audio = _t.first);\n      }\n    },\n    decls: 14,\n    vars: 5,\n    consts: [[1, \"audio\"], [\"audio\", \"\"], [1, \"buttons\", \"top\"], [\"mat-fab\", \"\", 1, \"power\", \"button\", 3, \"click\", \"press\"], [\"mat-fab\", \"\", 1, \"help\", \"button\", 3, \"click\", \"press\"], [4, \"ngIf\"], [1, \"buttons\", \"bottom\"], [1, \"buttons\", \"bottom\", \"right\"], [\"mat-fab\", \"\", \"class\", \"independentAudio button\", 3, \"click\", \"press\", 4, \"ngIf\"], [\"top\", \"50vh\", \"right\", \"50vw\", 3, \"sharing\", \"openControlledByPower\", \"blur\", \"preset\", \"init\"], [\"mat-fab\", \"\", \"class\", \"dta button\", 3, \"grey\", \"click\", \"press\", 4, \"ngIf\"], [\"mat-fab\", \"\", \"class\", \"dta button\", 3, \"click\", \"press\", 4, \"ngIf\"], [\"mat-fab\", \"\", 1, \"dta\", \"button\", 3, \"click\", \"press\"], [\"mat-fab\", \"\", 1, \"independentAudio\", \"button\", 3, \"click\", \"press\"], [1, \"rotate-90\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"audiocontrol\", 0, 1);\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_3_listener() {\n          return ctx.command.buttonPress(\"power off\");\n        })(\"click\", function HomeComponent_Template_button_click_3_listener() {\n          return (ctx.wheel == null ? null : ctx.wheel.preset == null ? null : ctx.wheel.preset.shareablePresets == null ? null : ctx.wheel.preset.shareablePresets.length) > 1 ? ctx.showPowerOffDialog() : ctx.turnOff();\n        })(\"press\", function HomeComponent_Template_button_press_3_listener() {\n          return ctx.command.buttonPress(\"long press power off\");\n        })(\"press\", function HomeComponent_Template_button_press_3_listener() {\n          return (ctx.wheel == null ? null : ctx.wheel.preset == null ? null : ctx.wheel.preset.shareablePresets == null ? null : ctx.wheel.preset.shareablePresets.length) > 1 ? ctx.showPowerOffDialog() : ctx.turnOff();\n        });\n        i0.ɵɵelementStart(4, \"mat-icon\");\n        i0.ɵɵtext(5, \"power_settings_new\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_6_listener() {\n          ctx.showHelp();\n          return ctx.command.buttonPress(\"open help modal\");\n        })(\"press\", function HomeComponent_Template_button_press_6_listener() {\n          ctx.showHelp();\n          return ctx.command.buttonPress(\"long press open help modal\");\n        });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"help\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(9, HomeComponent_div_9_Template, 2, 4, \"div\", 5);\n        i0.ɵɵelementStart(10, \"div\", 6);\n        i0.ɵɵtemplate(11, HomeComponent_ng_container_11_Template, 3, 2, \"ng-container\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 7);\n        i0.ɵɵtemplate(13, HomeComponent_button_13_Template, 3, 0, \"button\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.data.panel == null ? null : ctx.data.panel.render);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (ctx.data == null ? null : ctx.data.panel == null ? null : ctx.data.panel.features.includes(\"share\")) && (ctx.wheel == null ? null : ctx.wheel.preset == null ? null : ctx.wheel.preset.shareablePresets == null ? null : ctx.wheel.preset.shareablePresets.length) > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"corner\", (ctx.wheel == null ? null : ctx.wheel.getPower()) !== \"on\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.defaultPreset == null ? null : ctx.defaultPreset.independentAudioDevices == null ? null : ctx.defaultPreset.independentAudioDevices.length) > 0 && !_r0.isShowing());\n      }\n    },\n    dependencies: [i7.NgIf, i8.MatIcon, i9.MatFabButton, i10.WheelComponent, i11.AudioComponent],\n    styles: [\".audio[_ngcontent-%COMP%]{position:absolute;height:100vh;width:100vw}.buttons[_ngcontent-%COMP%]{position:absolute;margin-left:3vw;color:#fff}.buttons[_ngcontent-%COMP%]   .button[_ngcontent-%COMP%]{margin-right:3vw;width:8vw;height:8vw}.buttons[_ngcontent-%COMP%]   .button[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]{margin-top:-1.1vh;font-size:5vw;height:5vw;width:5vw}.buttons.top[_ngcontent-%COMP%]{margin-top:3vh}.buttons.top[_ngcontent-%COMP%]   .power[_ngcontent-%COMP%]{background-color:var(--power-color);color:var(--power-icon-color)}.buttons.top[_ngcontent-%COMP%]   .help[_ngcontent-%COMP%]{background-color:var(--help-color);color:var(--help-icon-color)}.buttons.bottom[_ngcontent-%COMP%]{bottom:3.9vh}.buttons.bottom[_ngcontent-%COMP%]   .dta[_ngcontent-%COMP%]{background-color:var(--share-color);color:var(--share-icon-color)}.buttons.bottom.right[_ngcontent-%COMP%]{margin-right:11.5vw}.buttons.bottom.corner[_ngcontent-%COMP%]{margin-right:0vw;right:0vw}.buttons.right[_ngcontent-%COMP%]{right:0;margin-right:-.05vw}.label[_ngcontent-%COMP%]{position:absolute;color:#fff;display:flex;flex-flow:row wrap;justify-content:center;text-align:center;font-size:14pt;width:4vw}.label.top[_ngcontent-%COMP%]{margin-top:3vh}.label.right[_ngcontent-%COMP%]{right:0;margin-right:5vw}.rotate-90[_ngcontent-%COMP%]{transform:rotate(90deg)}.menu[_ngcontent-%COMP%]{position:absolute;bottom:0;margin-left:3%;margin-bottom:3vh}.badge[_ngcontent-%COMP%]{position:absolute;background-color:var(--share-display-badge-color);color:var(--share-display-badge-icon-color);width:50%;height:50%;border-radius:50%;margin-left:26%;margin-top:-80%}.share-display[_ngcontent-%COMP%]{background-color:var(--share-display-color);color:var(--share-display-text-color)}.grid[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;flex-wrap:wrap}.grid[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]{margin-left:5vw;margin-right:5vw;margin-bottom:2vh}.independentAudio[_ngcontent-%COMP%]{z-index:1000;margin-right:0}.independentAudioContent[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;justify-content:space-evenly}.independentAudioContent[_ngcontent-%COMP%]   .mic[_ngcontent-%COMP%]{height:60vh;display:flex;flex-direction:column;justify-content:space-evenly;align-items:center;transition:background-color .4s ease-in-out;will-change:background-color}.independentAudioContent[_ngcontent-%COMP%]   .mic[_ngcontent-%COMP%]   .notouch[_ngcontent-%COMP%]{pointer-events:none}.independentAudioContent[_ngcontent-%COMP%]   .mic[_ngcontent-%COMP%]   .mat-slider-vertical[_ngcontent-%COMP%]{height:100%}.independentAudioContent[_ngcontent-%COMP%]   .mic[_ngcontent-%COMP%]   .mute[_ngcontent-%COMP%]{background-color:#1e88e5}.independentAudioContent[_ngcontent-%COMP%]   .mic[_ngcontent-%COMP%]   .mute.muted[_ngcontent-%COMP%]{background-color:#c62828}.swal-button[_ngcontent-%COMP%]{height:4.16vh;display:flex;justify-content:center;align-items:center}.btn-danger[_ngcontent-%COMP%]{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-warn[_ngcontent-%COMP%]{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-neutral[_ngcontent-%COMP%]{color:#fff;background-color:#aaa;border-color:#aaa}\", \".basediv[_ngcontent-%COMP%], .basediv[_ngcontent-%COMP%]   .lock[_ngcontent-%COMP%]{background-color:var(--background-color);box-shadow:var(--background-shadow)}#screenoff[_ngcontent-%COMP%]{background-color:var(--background-color);box-shadow:var(--background-shadow);color:#fff}.circle[_ngcontent-%COMP%]   .wheel[_ngcontent-%COMP%]{border:.2vh solid var(--wheel-outline-color)}.circle[_ngcontent-%COMP%]   .wheel[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{text-shadow:0 0 1.2vh black}.circle[_ngcontent-%COMP%]   .wheel[_ngcontent-%COMP%]   .input-slice[_ngcontent-%COMP%]{background-color:var(--input-color);box-shadow:inset 0 0 30vh 1vh #0000004d}.circle[_ngcontent-%COMP%]   .wheel[_ngcontent-%COMP%]   .input-slice[_ngcontent-%COMP%]   .input[_ngcontent-%COMP%]{color:var(--input-text-color)}.circle[_ngcontent-%COMP%]   .wheel[_ngcontent-%COMP%]   .title-slice[_ngcontent-%COMP%]{background-color:var(--wheel-title-color)}.circle[_ngcontent-%COMP%]   .wheel[_ngcontent-%COMP%]   .selected-input[_ngcontent-%COMP%]{background-color:var(--selected-input-color)}.circle[_ngcontent-%COMP%]   .wheel[_ngcontent-%COMP%]   .selected-input[_ngcontent-%COMP%]   .input[_ngcontent-%COMP%]{color:var(--selected-input-text-color)}.circle[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]{background-color:var(--center-off-color);border:.5vh solid var(--wheel-outline-color);color:var(--center-text-color);box-shadow:inset 0 0 15vh 3vh #0000004d}.circle[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .name[_ngcontent-%COMP%]{color:var(--wheel-title-text-color)}.circle[_ngcontent-%COMP%]   .center.on[_ngcontent-%COMP%]{background-color:var(--center-on-color)}.circle[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{color:var(text-color)}\"]\n  }));\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}