{"ast":null,"code":"import _defineProperty from \"/home/orcrist/Desktop/touchpanel-ui-microservice/blueberry/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport { APIService } from \"./api.service\";\nimport { SocketService, MESSAGE } from \"./socket.service\";\nimport { Preset, Panel, AudioConfig } from \"../objects/objects\";\nimport { Device, Input, Display, AudioDevice, POWER, INPUT, BLANKED, MUTED, VOLUME } from \"../objects/status.objects\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./socket.service\";\nexport let DataService = /*#__PURE__*/(() => {\n  var _class;\n  class DataService {\n    constructor(api, socket) {\n      _defineProperty(this, \"api\", void 0);\n      _defineProperty(this, \"socket\", void 0);\n      _defineProperty(this, \"loaded\", void 0);\n      _defineProperty(this, \"panel\", void 0);\n      _defineProperty(this, \"inputs\", []);\n      _defineProperty(this, \"displays\", []);\n      _defineProperty(this, \"audioDevices\", []);\n      _defineProperty(this, \"audioConfig\", new Map());\n      _defineProperty(this, \"presets\", []);\n      _defineProperty(this, \"panels\", []);\n      this.api = api;\n      this.socket = socket;\n      this.loaded = new EventEmitter();\n      this.api.loaded.subscribe(() => {\n        this.createInputs();\n        this.createOutputs();\n        this.createPresets();\n        this.createPanels();\n        this.update();\n        this.loaded.emit(true);\n      });\n    }\n    createInputs() {\n      for (const config of APIService.room.uiconfig.inputConfiguration) {\n        const name = config.name.split(\"|\")[0];\n        const input = APIService.room.config.devices.find(i => i.name === name);\n        if (input && input.hasRole(\"VideoIn\")) {\n          const reachability = APIService.room.config.input_reachability[name];\n          if (!reachability) {\n            console.warn(\"no displays are reachable from input\", name);\n            continue;\n          }\n          const dispname = config.displayname ? config.displayname : input.display_name;\n          const subs = [];\n          console.log(\"does the input have subInputs?\", config);\n          if (config.subInputs !== undefined) {\n            for (const io of config.subInputs) {\n              subs.push(new Input(io.name, io.displayname, io.icon, reachability, []));\n            }\n          }\n          this.inputs.push(new Input(config.name, dispname, config.icon, reachability, subs));\n        } else {\n          console.warn(\"no input '\" + name + \"' found with role 'VideoIn', skipping it\");\n        }\n      }\n      console.info(\"Inputs\", this.inputs);\n    }\n    createOutputs() {\n      // create displays\n      for (const status of APIService.room.status.displays) {\n        const config = APIService.room.config.devices.find(d => d.name === status.name);\n        if (config != null) {\n          const d = new Display(status.name, config.display_name, status.power, Input.getInput(status.input, this.inputs), status.blanked);\n          this.displays.push(d);\n        } else {\n          console.warn(\"No configuration found for this display:\", status);\n        }\n      }\n      console.info(\"Displays\", this.displays);\n      // create audioDevices\n      for (const status of APIService.room.status.audioDevices) {\n        const config = APIService.room.config.devices.find(d => d.name === status.name);\n        if (config != null) {\n          const a = new AudioDevice(status.name, config.display_name, status.power, Input.getInput(status.input, this.inputs), status.muted, status.volume);\n          this.audioDevices.push(a);\n        } else {\n          console.warn(\"No configuration found for this audio device:\", status);\n        }\n      }\n      console.info(\"AudioDevices\", this.audioDevices);\n      // create room wide audio map\n      if (APIService.room.uiconfig.audioConfiguration != null) {\n        for (const config of APIService.room.uiconfig.audioConfiguration) {\n          // get display\n          const display = this.displays.find(d => d.name === config.display);\n          const audioDevices = this.audioDevices.filter(a => config.audioDevices.includes(a.name));\n          this.audioConfig.set(display, new AudioConfig(display, audioDevices, config.roomWide));\n        }\n        // fill out rest of audio config\n        for (const preset of APIService.room.uiconfig.presets) {\n          const audioDevices = this.audioDevices.filter(a => preset.audioDevices.includes(a.name));\n          for (const display of preset.displays) {\n            const d = this.displays.find(dd => dd.name === display);\n            if (!this.audioConfig.has(d)) {\n              this.audioConfig.set(d, new AudioConfig(d, audioDevices, false));\n            }\n          }\n        }\n        console.log(\"AudioConfig\", this.audioConfig);\n      } else {\n        console.warn(\"No AudioConfig present.\");\n      }\n    }\n    createPresets() {\n      for (const preset of APIService.room.uiconfig.presets) {\n        const displays = Device.filterDevices(preset.displays, this.displays);\n        const audioDevices = Device.filterDevices(preset.audioDevices, this.audioDevices);\n        const inputs = Device.filterDevices(preset.inputs, this.inputs);\n        const independentAudioDevices = Device.filterDevices(preset.independentAudioDevices, this.audioDevices);\n        const p = new Preset(preset.name, preset.icon, displays, audioDevices, inputs, preset.shareablePresets, independentAudioDevices, preset.commands);\n        this.presets.push(p);\n      }\n      console.info(\"Presets\", this.presets);\n    }\n    createPanels() {\n      for (const panel of APIService.room.uiconfig.panels) {\n        const preset = this.presets.find(p => p.name === panel.preset);\n        this.panels.push(new Panel(panel.hostname, panel.uipath, preset, panel.features));\n      }\n      console.info(\"Panels\", this.panels);\n      this.panel = this.panels.find(p => p.hostname === APIService.piHostname);\n      this.panel.render = true;\n      console.info(\"Panel\", this.panel);\n    }\n    update() {\n      this.socket.getEventListener().subscribe(event => {\n        if (event.type === MESSAGE) {\n          const e = event.data;\n          let split = [];\n          if (e.TargetDevice != null && e.TargetDevice !== undefined) {\n            split = e.TargetDevice.DeviceID.split(\"-\");\n          }\n          if (e.Value.length > 0 && split.length === 3) {\n            switch (e.Key) {\n              case POWER:\n                {\n                  let output;\n                  output = this.displays.find(d => d.name === split[2]);\n                  if (output != null) {\n                    output.power = e.Value;\n                  }\n                  output = this.audioDevices.find(a => a.name === split[2]);\n                  if (output != null) {\n                    output.power = e.Value;\n                  }\n                  break;\n                }\n              case INPUT:\n                {\n                  let output;\n                  output = this.displays.find(d => d.name === split[2]);\n                  if (output != null) {\n                    output.input = Input.getInput(e.Value, this.inputs);\n                  }\n                  output = this.audioDevices.find(a => a.name === split[2]);\n                  if (output != null) {\n                    output.input = Input.getInput(e.Value, this.inputs);\n                  }\n                  break;\n                }\n              case BLANKED:\n                {\n                  const display = this.displays.find(d => d.name === split[2]);\n                  if (display != null) {\n                    display.blanked = e.Value.toLowerCase() === \"true\";\n                  }\n                  break;\n                }\n              case MUTED:\n                {\n                  const audioDevice = this.audioDevices.find(a => a.name === split[2]);\n                  if (audioDevice != null) {\n                    audioDevice.muted = e.Value.toLowerCase() === \"true\";\n                  }\n                  break;\n                }\n              case VOLUME:\n                {\n                  const audioDevice = this.audioDevices.find(a => a.name === split[2]);\n                  if (audioDevice != null) {\n                    audioDevice.volume = parseInt(e.Value, 10);\n                  }\n                  break;\n                }\n              default:\n                break;\n            }\n          } else {\n            console.warn(\"<data service> invalid event\", e);\n          }\n        }\n      });\n    }\n    getAudioConfigurations(displays) {\n      const audioConfigs = [];\n      for (const display of displays) {\n        const config = this.audioConfig.get(display);\n        if (config != null) {\n          audioConfigs.push(config);\n        }\n      }\n      return audioConfigs;\n    }\n    hasRoomWide(audioConfigs) {\n      for (const config of audioConfigs) {\n        if (config.roomWide) {\n          return true;\n        }\n      }\n      return false;\n    }\n    getInputConfiguration(input) {\n      for (const device of APIService.room.config.devices) {\n        if (device.name === input.name) {\n          return device;\n        }\n      }\n    }\n  }\n  _class = DataService;\n  _defineProperty(DataService, \"\\u0275fac\", function DataService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.APIService), i0.ɵɵinject(i2.SocketService));\n  });\n  _defineProperty(DataService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  }));\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}