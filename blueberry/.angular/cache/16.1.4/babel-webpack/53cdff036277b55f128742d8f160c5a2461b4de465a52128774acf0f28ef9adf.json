{"ast":null,"code":"\"use strict\";\n\nvar MetadataStorage_1 = require(\"./metadata/MetadataStorage\");\nvar Serializer = function () {\n  function Serializer() {}\n  // -------------------------------------------------------------------------\n  // Adder Methods\n  // -------------------------------------------------------------------------\n  Serializer.prototype.serialize = function (object, options) {\n    var _this = this;\n    if (object instanceof Array) {\n      return object.map(function (item) {\n        return _this.convert(item.constructor, item, \"serialization\");\n      });\n    } else {\n      var cls = object.constructor;\n      return this.convert(cls, object, \"serialization\", options);\n    }\n  };\n  Serializer.prototype.deserialize = function (cls, json, options) {\n    var _this = this;\n    if (json instanceof Array) {\n      return json.map(function (item) {\n        return _this.convert(cls, item, \"deserialization\");\n      });\n    } else {\n      return this.convert(cls, json, \"deserialization\", options);\n    }\n  };\n  // -------------------------------------------------------------------------\n  // Adder Methods\n  // -------------------------------------------------------------------------\n  Serializer.prototype.convert = function (cls, object, operationType, options) {\n    var _this = this;\n    if (object === null || object === undefined) return object;\n    var newObject = operationType === \"serialization\" ? {} : new cls();\n    var _loop_1 = function (key) {\n      if (this_1.isSkipped(cls, key, operationType)) return \"continue\";\n      if (typeof object[key] !== \"function\") {\n        if (options && options.skipStartedWith && key.substr(0, options.skipStartedWith.length) === options.skipStartedWith) return \"continue\";\n        var type_1 = this_1.getType(cls, key);\n        if (object[key] instanceof Array) {\n          // if (object[key].length > 0 && !type && operationType === \"deserialization\")\n          //     throw new TypeMissingError(cls, key);\n          if (object[key].length > 0 && type_1) {\n            newObject[key] = object[key].map(function (arrayItem) {\n              return _this.convert(type_1, arrayItem, operationType);\n            });\n          } else {\n            newObject[key] = object[key];\n          }\n        } else if (object[key] instanceof Object && type_1) {\n          // if (!type && operationType === \"deserialization\")\n          //     throw new TypeMissingError(cls, key);\n          newObject[key] = this_1.convert(type_1, object[key], operationType);\n        } else {\n          if (type_1 === Date) {\n            newObject[key] = new Date(object[key]);\n          } else if (type_1 === String) {\n            newObject[key] = String(object[key]);\n          } else if (type_1 === Number) {\n            newObject[key] = Number(object[key]);\n          } else if (type_1 === Boolean) {\n            newObject[key] = Boolean(object[key]);\n          } else {\n            newObject[key] = object[key];\n          }\n        }\n      }\n    };\n    var this_1 = this;\n    for (var key in object) {\n      var state_1 = _loop_1(key);\n      if (state_1 === \"continue\") continue;\n    }\n    return newObject;\n  };\n  Serializer.prototype.isSkipped = function (target, propertyName, operationType) {\n    if (!target) return undefined;\n    var meta = MetadataStorage_1.defaultMetadataStorage.findSkipMetadata(target, propertyName);\n    return operationType === \"serialization\" ? meta && meta.isOnSerialize : meta && meta.isOnDeserialize;\n  };\n  Serializer.prototype.getType = function (target, propertyName) {\n    if (!target) return undefined;\n    var meta = MetadataStorage_1.defaultMetadataStorage.findTypeMetadata(target, propertyName);\n    return meta ? meta.typeFunction() : undefined;\n  };\n  return Serializer;\n}();\nexports.Serializer = Serializer;\nvar serializer = new Serializer();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = serializer;\nfunction serialize(object) {\n  return serializer.serialize(object);\n}\nexports.serialize = serialize;\nfunction deserialize(cls, json) {\n  return serializer.deserialize(cls, json);\n}\nexports.deserialize = deserialize;\n//# sourceMappingURL=Serializer.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}