{"ast":null,"code":"var _class;\nvar WheelComponent_1;\nvar _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, Input as AngularInput, Output as AngularOutput, ElementRef, ViewChild, EventEmitter } from \"@angular/core\";\nimport { SwalPartialTargets } from \"@toverux/ngx-sweetalert2\";\nimport { Preset } from \"../objects/objects\";\nimport { Display, AudioDevice } from \"../objects/status.objects\";\nimport { CommandService } from \"../services/command.service\";\nimport { APIService } from \"../services/api.service\";\nimport { MatDialog } from \"@angular/material\";\nexport let WheelComponent = (_class = class WheelComponent {\n  constructor(command, api, swalTargets, dialog) {\n    this.command = command;\n    this.api = api;\n    this.swalTargets = swalTargets;\n    this.dialog = dialog;\n    this.init = new EventEmitter();\n    this.circleOpen = false;\n    this.thumbLabel = true;\n  }\n  ngAfterContentInit() {\n    setTimeout(() => {\n      this.render();\n      this.init.emit(true);\n      if (this.openControlledByPower) {\n        setInterval(() => {\n          this.circleOpen = this.getPower() === \"on\";\n        }, 1000);\n      }\n    }, 0);\n  }\n  toggle() {\n    if (this.circleOpen) {\n      this.close();\n    } else {\n      this.open(true, 0);\n    }\n  }\n  open(togglePower, delay) {\n    if (togglePower && this.getPower() !== \"on\") {\n      this.command.setPower(\"on\", this.preset.displays);\n    }\n    setTimeout(() => {\n      this.circleOpen = true;\n    }, delay);\n  }\n  close() {\n    this.circleOpen = false;\n  }\n  render() {\n    this.setTranslate();\n    const numOfChildren = this.preset.inputs.length + this.preset.extraInputs.length;\n    const children = this.wheel.nativeElement.children;\n    const angle = (360 - WheelComponent_1.TITLE_ANGLE) / numOfChildren;\n    this.arcpath = this.getArc(0.5, 0.5, 0.5, 0, angle);\n    this.titlearcpath = this.getArc(0.5, 0.5, 0.5, 0, WheelComponent_1.TITLE_ANGLE);\n    let rotate = \"rotate(\" + String(-WheelComponent_1.TITLE_ANGLE_ROTATE) + \"deg)\";\n    children[0].style.transform = rotate;\n    children[0 + numOfChildren + 1].style.transform = rotate; // rotate the line the corrosponds to this slice\n    rotate = \"rotate(\" + String(WheelComponent_1.TITLE_ANGLE_ROTATE) + \"deg)\";\n    children[0].firstElementChild.style.transform = rotate;\n    for (let i = 1; i <= numOfChildren; ++i) {\n      rotate = \"rotate(\" + String(angle * -i - WheelComponent_1.TITLE_ANGLE_ROTATE) + \"deg)\";\n      children[i].style.transform = rotate;\n      children[i + numOfChildren + 1].style.transform = rotate; // rotate the line that corrosponds to this slice\n      rotate = \"rotate(\" + String(angle * i + WheelComponent_1.TITLE_ANGLE_ROTATE) + \"deg)\";\n      children[i].firstElementChild.style.transform = rotate;\n    }\n    this.setInputOffset();\n  }\n  setTranslate() {\n    const offsetX = parseInt(this.right, 10);\n    const offsetY = parseInt(this.top, 10);\n    const x = 50 - offsetX;\n    const y = 50 - offsetY;\n    this.translate = String(\"translate(\" + x + \"vw,\" + y + \"vh)\");\n  }\n  setInputOffset() {\n    let top;\n    let right;\n    switch (this.preset.inputs.length + this.preset.extraInputs.length) {\n      case 7:\n        top = -0.6;\n        right = 25.4;\n        break;\n      case 6:\n        top = 0.8;\n        right = 24;\n        break;\n      case 5:\n        top = 2;\n        right = 20.4;\n        break;\n      case 4:\n        top = 4;\n        right = 17.5;\n        break;\n      case 3:\n        top = 9;\n        right = 12;\n        break;\n      case 2:\n        top = 20;\n        right = 2;\n        break;\n      case 1:\n        top = 63;\n        right = 7;\n        break;\n      default:\n        console.warn(\"no configuration for\", this.preset.inputs.length + this.preset.extraInputs.length, \"inputs\");\n        break;\n    }\n    this.topoffset = String(top) + \"%\";\n    this.rightoffset = String(right) + \"%\";\n  }\n  getArc(x, y, radius, startAngle, endAngle) {\n    const start = this.polarToCart(x, y, radius, endAngle);\n    const end = this.polarToCart(x, y, radius, startAngle);\n    const largeArc = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n    const d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArc, 0, end.x, end.y, \"L\", x, y, \"L\", start.x, start.y].join(\" \");\n    return d;\n  }\n  polarToCart(cx, cy, r, angle) {\n    const angleInRad = (angle - 90) * Math.PI / 180.0;\n    return {\n      x: cx + r * Math.cos(angleInRad),\n      y: cy + r * Math.sin(angleInRad)\n    };\n  }\n  closeThumb() {\n    setTimeout(() => {\n      document.getElementById(\"slider\").blur();\n    }, 750);\n  }\n  getInput() {\n    return Display.getInput(this.preset.displays);\n  }\n  getBlank() {\n    return Display.getBlank(this.preset.displays);\n  }\n  getPower() {\n    return Display.getPower(this.preset.displays);\n  }\n  getVolume() {\n    return AudioDevice.getVolume(this.preset.audioDevices);\n  }\n  getMute() {\n    return AudioDevice.getMute(this.preset.audioDevices);\n  }\n  getDisplayNames() {\n    const names = [];\n    if (this.preset == null || this.preset.displays == null) {\n      return names;\n    }\n    for (const d of this.preset.displays) {\n      names.push(d.name);\n    }\n    return names;\n  }\n  inputIsSelected(i) {\n    const currentInput = Display.getInput(this.preset.displays);\n    if (currentInput === i) {\n      return true;\n    }\n    if (i.subInputs !== undefined && i.subInputs.length > 0) {\n      for (const sub of i.subInputs) {\n        if (currentInput.name === sub.name) {\n          return true;\n        }\n      }\n    }\n  }\n}, WheelComponent_1 = _class, _class.TITLE_ANGLE = 100, _class.TITLE_ANGLE_ROTATE = WheelComponent_1.TITLE_ANGLE / 2, _class);\n__decorate([AngularInput(), __metadata(\"design:type\", Preset)], WheelComponent.prototype, \"preset\", void 0);\n__decorate([AngularInput(), __metadata(\"design:type\", Boolean)], WheelComponent.prototype, \"blur\", void 0);\n__decorate([AngularInput(), __metadata(\"design:type\", String)], WheelComponent.prototype, \"top\", void 0);\n__decorate([AngularInput(), __metadata(\"design:type\", String)], WheelComponent.prototype, \"right\", void 0);\n__decorate([AngularInput(), __metadata(\"design:type\", Boolean)], WheelComponent.prototype, \"openControlledByPower\", void 0);\n__decorate([AngularInput(), __metadata(\"design:type\", Boolean)], WheelComponent.prototype, \"sharing\", void 0);\n__decorate([AngularOutput(), __metadata(\"design:type\", EventEmitter)], WheelComponent.prototype, \"init\", void 0);\n__decorate([ViewChild(\"wheel\"), __metadata(\"design:type\", ElementRef)], WheelComponent.prototype, \"wheel\", void 0);\nWheelComponent = WheelComponent_1 = __decorate([Component({\n  selector: \"wheel\",\n  templateUrl: \"./wheel.component.html\",\n  styleUrls: [\"./wheel.component.scss\", \"../colorscheme.scss\"]\n}), __metadata(\"design:paramtypes\", [CommandService, APIService, SwalPartialTargets, typeof (_a = typeof MatDialog !== \"undefined\" && MatDialog) === \"function\" ? _a : Object])], WheelComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}