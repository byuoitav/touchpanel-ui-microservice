{"ast":null,"code":"import _asyncToGenerator from \"/home/orcrist/Desktop/touchpanel-ui-microservice/blueberry/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild, EventEmitter } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material\";\nimport { WheelComponent } from \"./wheel.component\";\nimport { DataService } from \"../services/data.service\";\nimport { CommandService } from \"../services/command.service\";\nimport { APIService } from \"../services/api.service\";\nimport { GraphService } from \"../services/graph.service\";\nimport { SocketService, MESSAGE, Event, BasicDeviceInfo, BasicRoomInfo } from \"../services/socket.service\";\nimport { Preset } from \"../objects/objects\";\nimport { INPUT, Input, POWER, POWER_OFF_ALL } from \"../objects/status.objects\";\nimport { HelpModal } from \"../modals/helpmodal/helpmodal.component\";\nimport { PowerOffAllModalComponent } from \"../modals/poweroffallmodal/poweroffallmodal.component\";\nimport { ShareModalComponent } from \"../modals/sharemodal/sharemodal.component\";\nimport { AudioComponent } from \"./audio/audio.component\";\nimport { MirrorModalComponent } from \"../modals/mirrormodal/mirrormodal.component\";\nimport { MessageModalComponent } from \"../modals/messagemodal/messagemodal.component\";\nimport { StreamModalComponent } from \"app/modals/streammodal/streammodal.component\";\nexport const SHARE = \"start_share\";\nexport const STOP_SHARE = \"stop_share\";\nexport const LEAVE_SHARE = \"leave_share\";\nexport const JOIN_SHARE = \"join_share\";\n/*\n * This is where the logic for sharing lives.\n *\n * To start sharing, send an event:\n *      {\n *          requestor: the name of the preset that is sharing,\n *          device: list of displays you are sharing to,\n *          Key: SHARE,\n *      }\n * Actions a minion takes upon receiving a SHARE event that applies to them:\n *      - show a modal window that blocks user from pressing anything other than stop\n *          - when stop is pressed, a minion sends a STOP_MIRRORING event (described below)\n *      - save the name of the preset that is controlling you\n *\n *\n * To stop sharing:\n *      {\n *          requestor: the name of the preset that is stopping sharing,\n *          device: list of displays that you are still controlling (bc some may have left),\n *          Key: STOP_SHARE,\n *      }\n * Actions a minion takes upon receiving a STOP_SHARE event that applies to them:\n *      - delete any extra inputs that have been created\n *      - remove the modal window\n *\n *\n * If you are a minion, and want the master to stop controlling your displays, send:\n *      {\n *          requestor: the name of the preset that is controlling you,\n *          device: list of the displays you want removed from being controlled (i.e. your displays),\n *          Key: LEAVE_SHARE\n *      }\n *      also, unmute/unblank yourself.\n * Actions a minion takes upon receiving a LEAVE_SHARE event:\n *      - if the displays in *device* match its displays\n *          - unmute/unblank\n *          - switch back to my local input (?)\n * Actions a master takes upon receiving a LEAVE_SHARE event:\n *      -   remove each display in *device* field from current preset\n *          - if a roomWideAudio was removed:\n *              - change sharePreset.audioDevices to be your default preset's audioDevices\n *              - unmute your audioDevices\n *\n *\n * If you are a minion who has left the group, and would like to rejoin, send:\n *      {\n *          requestor: the name of the preset who is requesting me to join the group\n *          device: list of displays you want to be controlled,\n *          Key: JOIN_SHARE\n *          Value: the name of the preset that that started the group,\n *      }\n *      also show the same modal window that appears when receiving a SHARE event\n *      and lookup the status of the preset you would like to join, and mirror that.\n * Actions a minion takes upon receiving a JOIN_SHARE event:\n *      - if their displays are in the *device* field\n *          - lookup the status of the preset defined in the requestor field, and mirror that\n *          - show the SHARE modal window\n * Actions a master takes upon receiving a JOIN_SHARE event:\n *      - add each display from *device* into the current preset.\n *          - if a roomWideAudio was added:\n *              - change sharePreset.audioDevices to be the roomWideAudio.\n *              - mute everything that isn't a roomWideAudio\n */\nexport let HomeComponent = class HomeComponent {\n  constructor(data, socket, api, command, graph, dialog) {\n    var _this = this;\n    this.data = data;\n    this.socket = socket;\n    this.api = api;\n    this.command = command;\n    this.graph = graph;\n    this.dialog = dialog;\n    this.mirroringMe = [];\n    this.turnOff = () => {\n      const ret = new EventEmitter();\n      if (this.wheel.preset === this.sharePreset) {\n        // unshare first\n        this.unshare(this.defaultPreset, this.mirroringMe).subscribe(success => {\n          if (success) {\n            // power off this preset\n            this.wheel.command.powerOff(this.wheel.preset).subscribe(successTwo => {\n              if (successTwo) {\n                this.wheel.close();\n                ret.emit(true);\n              } else {\n                console.warn(\"failed to power off preset\");\n                ret.emit(false);\n              }\n            });\n          } else {\n            console.warn(\"failed to unshare to turn off preset.\");\n            ret.emit(false);\n          }\n        });\n      } else {\n        // power off this preset.\n        this.wheel.command.powerOff(this.wheel.preset).subscribe(success => {\n          if (success) {\n            this.wheel.close();\n            ret.emit(true);\n          } else {\n            console.warn(\"failed to power off preset\");\n            ret.emit(false);\n          }\n        });\n      }\n      return ret;\n    };\n    this.buildSharePreset = (from, to) => {\n      // create a new preset that controls what i should control now\n      let displays = from.displays.slice();\n      to.forEach(p => displays.push(...p.displays));\n      displays = Array.from(new Set(displays));\n      const audioDevices = from.audioDevices.slice();\n      const audioConfigs = this.data.getAudioConfigurations(displays);\n      if (this.data.hasRoomWide(audioConfigs)) {\n        audioDevices.length = 0;\n        for (const config of audioConfigs) {\n          if (config.roomWide) {\n            audioDevices.push(...config.audioDevices);\n          }\n        }\n      }\n      // build the new preset\n      return new Preset(\"Sharing\", \"subscriptions\", displays, Array.from(new Set(audioDevices)), from.inputs, from.shareablePresets, from.independentAudioDevices, from.commands);\n    };\n    this.share = (from, to) => {\n      return /*#__PURE__*/_asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          console.log(\"sharing from\", from, \"to\", to);\n          // if you share, you can't go back to and old group anymore\n          _this.removeExtraInputs();\n          const preset = _this.buildSharePreset(from, to);\n          console.log(\"share preset\", preset);\n          _this.command.share(from, to).subscribe(success => {\n            if (success) {\n              _this.mirroringMe.push(...to);\n              _this.sharePreset = preset;\n              _this.changePreset(_this.sharePreset);\n              const event = new Event();\n              event.User = from.name;\n              event.EventTags = [\"ui-communication\"];\n              event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n              event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n              event.Key = SHARE;\n              event.Value = \" \";\n              event.Data = _this.mirroringMe.map(p => p.name);\n              _this.api.sendEvent(event);\n            }\n            resolve(success);\n          });\n        });\n      });\n    };\n    // from should be the default preset, to should be the list of presets i'm sharing to\n    this.unshare = (from, to) => {\n      const ret = new EventEmitter();\n      console.log(\"unsharing from\", from, \"to\", to);\n      // show the unshare popup\n      const ref = this.showMessageModal(\"Returning room to default state...\", undefined, true, undefined);\n      this.command.unshare(from, to).subscribe(success => {\n        if (success) {\n          this.changePreset(from);\n          this.mirroringMe = this.mirroringMe.filter(p => !to.includes(p));\n          const event = new Event();\n          event.User = from.name;\n          event.EventTags = [\"ui-communication\"];\n          event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n          event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n          event.Key = STOP_SHARE;\n          event.Value = \" \";\n          event.Data = to.map(p => p.name);\n          this.api.sendEvent(event);\n        }\n        ref.close();\n        ret.emit(success);\n      });\n      return ret;\n    };\n    this.mirror = preset => {\n      const input = this.buildMirrorInput(preset);\n      const ref = this.showMirrorModal(input);\n      console.log(\"mirroring\", preset.name);\n      if (this.wheel.preset === this.sharePreset) {\n        console.log(\"switching to default preset\");\n        this.changePreset(this.defaultPreset);\n      }\n      this.command.mirror(this.defaultPreset, preset).subscribe(success => {\n        if (success) {\n          // tell panels mirroring me to show that they are mirroring them too\n          const event = new Event();\n          event.User = this.defaultPreset.name;\n          event.EventTags = [\"ui-communication\"];\n          event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n          event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n          event.Key = JOIN_SHARE;\n          event.Value = preset.name;\n          event.Data = [this.defaultPreset.name];\n          this.api.sendEvent(event);\n        }\n      });\n      this.removeExtraInputs();\n      this.defaultPreset.extraInputs.push(input);\n    };\n    this.buildMirrorInput = preset => {\n      const currInput = this.wheel.getInput();\n      if (currInput != null) {\n        const input = new Input(currInput.name, preset.name, currInput.icon, currInput.reachableDisplays, currInput.subInputs);\n        input.click.subscribe(() => {\n          this.command.buttonPress(\"remirror\", preset.name);\n          this.mirror(preset);\n        });\n        return input;\n      } else {\n        console.warn(\"failed to find a current input for preset:\", preset);\n        return undefined;\n      }\n    };\n    this.removeMirrorPopup = () => {\n      for (const dialog of this.dialog.openDialogs) {\n        if (dialog.componentInstance instanceof MirrorModalComponent) {\n          dialog.close();\n        }\n      }\n    };\n    this.unmirror = () => {\n      return /*#__PURE__*/_asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          console.log(\"unmirroring\");\n          // switch the input back to default\n          _this.command.powerOnDefault(_this.defaultPreset).subscribe(success => {\n            const event = new Event();\n            event.User = _this.defaultPreset.name;\n            event.EventTags = [\"ui-communication\"];\n            event.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n            event.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n            event.Key = LEAVE_SHARE;\n            event.Value = _this.defaultPreset.name;\n            event.Data = [_this.defaultPreset.name];\n            _this.api.sendEvent(event);\n            resolve(success);\n            _this.removeMirrorPopup();\n          });\n        });\n      });\n    };\n    this.removeFromShare = presets => {\n      if (this.wheel.preset !== this.sharePreset) {\n        console.warn(\"trying to remove\", presets, \"from my share group, but i'm not currently sharing\");\n        return;\n      }\n      // only keep displays that i'm mirroring to\n      const trash = [];\n      for (const preset of presets) {\n        trash.push(...preset.displays);\n      }\n      this.sharePreset.displays = this.sharePreset.displays.filter(disp => !trash.some(d => d.name === disp.name));\n      this.sharePreset = this.fixAudio(this.sharePreset);\n      console.log(\"new share preset\", this.sharePreset);\n    };\n    // the presets have already set their inputs to match mine\n    this.addToShare = presets => {\n      if (this.wheel.preset !== this.sharePreset) {\n        console.warn(\"trying to add\", presets, \"to my share group, but i'm not currently sharing\");\n        return;\n      }\n      console.log(\"adding\", presets, \"to my share group\");\n      this.mirroringMe.push(...presets);\n      for (const preset of presets) {\n        this.sharePreset.displays.push(...preset.displays);\n      }\n      this.sharePreset = this.fixAudio(this.sharePreset);\n      console.log(\"new share preset\", this.sharePreset);\n    };\n    this.fixAudio = preset => {\n      const audioConfigs = this.data.getAudioConfigurations(preset.displays);\n      const hasRoomWide = this.data.hasRoomWide(audioConfigs);\n      if (hasRoomWide) {\n        const tomute = [];\n        audioConfigs.filter(config => !config.roomWide).forEach(config => tomute.push(...config.audioDevices));\n        // mute all the non-roomwide audio devices, unmute the room wide audios\n        this.command.setMute(true, tomute);\n        // unmute all the roomwide audio devices, set their volume to 30\n        preset.audioDevices.length = 0;\n        audioConfigs.filter(config => config.roomWide).forEach(config => preset.audioDevices.push(...config.audioDevices));\n      } else {\n        // make sure audio is coming from my preset\n        preset.audioDevices = this.defaultPreset.audioDevices;\n      }\n      this.command.setVolume(30, preset.audioDevices);\n      this.command.setMute(false, preset.audioDevices);\n      return preset;\n    };\n    this.data.loaded.subscribe(() => {\n      this.updateFromEvents();\n      this.setupInputFunctions();\n      this.updateHelp();\n    });\n  }\n  ngOnInit() {}\n  setupInputFunctions() {\n    console.log(\"setting up input functions\");\n    for (const i of this.data.inputs) {\n      // define what happens when the input is clicked\n      i.click.subscribe(() => {\n        if (this.wheel.preset === this.sharePreset && i.reachableDisplays.length === 1) {\n          this.showMessageModal(undefined, \"You must unshare before you can select this input.\", false, \"Ok\");\n          return;\n        }\n        if (i.subInputs !== undefined && i.subInputs.length > 0) {\n          this.dialog.open(StreamModalComponent, {\n            data: i\n          }).afterClosed().subscribe(theChosenOne => {\n            if (theChosenOne !== undefined) {\n              const input = theChosenOne;\n              this.command.setInput(input, this.wheel.preset.displays);\n            }\n            return;\n          });\n        } else {\n          console.log(\"no sub inputs\");\n          this.command.setInput(i, this.wheel.preset.displays);\n        }\n      });\n    }\n  }\n  onWheelInit() {\n    this.defaultPreset = this.wheel.preset;\n    if (this.wheel.getPower() === \"on\") {\n      this.wheel.open(false, 500);\n    }\n  }\n  turnOn() {\n    const ret = this.wheel.command.powerOnDefault(this.wheel.preset);\n    ret.subscribe(success => {\n      if (success) {\n        this.wheel.open(false, 200);\n      }\n    });\n    return ret;\n  }\n  updateFromEvents() {\n    this.socket.getEventListener().subscribe(event => {\n      if (event.type === MESSAGE) {\n        const e = event.data;\n        let split = [];\n        if (e.TargetDevice !== undefined) {\n          split = e.TargetDevice.DeviceID.split(\"-\");\n        }\n        if (e.Value.length > 0 && split.length === 3) {\n          switch (e.Key) {\n            case POWER:\n              if (e.Value === \"standby\" && this.wheel.preset.displays.find(d => d.name === split[2])) {\n                this.dialog.closeAll();\n                this.removeExtraInputs();\n              }\n              break;\n            case INPUT:\n              if (this.defaultPreset.extraInputs.length > 0) {\n                const input = Input.getInput(e.Value, this.data.inputs);\n                if (!this.defaultPreset.inputs.includes(input)) {\n                  console.log(\"updating extra input name/icon with: \", input);\n                  this.defaultPreset.extraInputs[0].name = input.name;\n                  this.defaultPreset.extraInputs[0].icon = input.icon;\n                }\n              }\n              break;\n            case SHARE:\n              if (e.User === this.defaultPreset.name) {\n                console.log(\"a panel i'm mirroring (\" + e.User + \") just shared to\", e.Value);\n                // someone who's panel i'm supposed to mirror just shared.\n                // so i should look like i'm sharing too!\n                const presets = [];\n                for (const name of e.Data) {\n                  const preset = this.data.presets.find(p => p.name === name);\n                  if (preset) {\n                    presets.push(preset);\n                  }\n                }\n                this.sharePreset = this.buildSharePreset(this.defaultPreset, presets);\n                this.changePreset(this.sharePreset);\n                this.mirroringMe = presets;\n              } else if (this.appliesToMe(e.Data)) {\n                console.log(e.User, \"just shared to me\");\n                if (this.wheel.preset === this.sharePreset) {\n                  console.log(\"and i'm already sharing to a group.\");\n                  // e.User just shared to me, but I'm already sharing to a group.\n                  // the preset who just shared to me should absorb my group.\n                  const presetsToMirror = [];\n                  this.mirroringMe.filter(p => !e.Data.includes(p.name)).forEach(p => presetsToMirror.push(p.name));\n                  if (presetsToMirror.length > 0) {\n                    const eve = new Event();\n                    eve.User = this.defaultPreset.name;\n                    eve.EventTags = [\"ui-communication\"];\n                    eve.AffectedRoom = new BasicRoomInfo(APIService.building + \"-\" + APIService.roomName);\n                    eve.TargetDevice = new BasicDeviceInfo(APIService.piHostname);\n                    eve.Key = JOIN_SHARE;\n                    eve.Value = e.User;\n                    eve.Data = this.mirroringMe.filter(p => !e.Data.includes(p.name)).map(p => p.name);\n                    this.api.sendEvent(eve);\n                  }\n                  this.changePreset(this.defaultPreset);\n                }\n                // someone shared to me. i should look like a minion.\n                const preset = this.data.presets.find(p => p.name === e.User);\n                const input = this.buildMirrorInput(preset);\n                this.removeExtraInputs();\n                this.defaultPreset.extraInputs.push(input);\n                // show the popup\n                this.showMirrorModal(input);\n              } else if (this.appliesToMyGroup(e.Data)) {\n                // a preset that i previously shared to have been shared to by a new station.\n                // they should be removed from my mirroringMe group so that\n                // i don't send an unshare event to them.\n                console.log(e.User, \"just shared to preset(s) that i was sharing to\");\n                this.mirroringMe = this.mirroringMe.filter(p => !e.Data.includes(p.name));\n                if (this.mirroringMe.length === 0) {\n                  console.log(\"i'm no longer sharing to any displays. :(\");\n                  this.changePreset(this.defaultPreset);\n                } else {\n                  console.log(\"presets still mirroring me after removing them:\", this.mirroringMe);\n                }\n              }\n              break;\n            case STOP_SHARE:\n              console.log(\"got unshare event, unshared to \", e.Data);\n              if (this.wheel.preset === this.sharePreset && e.User === this.defaultPreset.name) {\n                console.log(\"a panel i'm mirroring just unshared\");\n                // someone who's panel i'm mirroring just unshared.\n                this.changePreset(this.defaultPreset);\n              } else if (this.appliesToMe(e.Data)) {\n                console.log(e.User, \"just stopped sharing with me\");\n                this.removeExtraInputs();\n                this.removeMirrorPopup();\n              }\n              break;\n            case LEAVE_SHARE:\n              if (this.appliesToMe(e.Data)) {\n                console.log(\"a panel i'm mirroring just left our share group\");\n                // someone who's panel i'm mirroring just left a group\n                this.removeMirrorPopup();\n              } else if (this.mirroringMe.some(p => p.name === e.User)) {\n                // someone i'm mirroring to left my group\n                console.log(e.User, \"has left my group\");\n                const preset = this.data.presets.find(p => p.name === e.User);\n                this.removeFromShare([preset]);\n              }\n              break;\n            case JOIN_SHARE:\n              if (this.wheel.preset === this.sharePreset && e.Value === this.defaultPreset.name) {\n                // someone wants to join *my* group\n                const presets = this.data.presets.filter(p => {\n                  return e.Data.includes(p.name) && !this.mirroringMe.includes(p);\n                });\n                if (presets.length > 0) {\n                  console.log(presets, \"are joining my group at the request of\", e.User);\n                  this.addToShare(presets);\n                }\n              } else if (e.User === this.defaultPreset.name) {\n                console.log(\"a panel i'm mirroring just rejoined\", e.Value + \"'s group.\");\n                // a panel i'm mirroring just rejoined a group\n                const preset = this.data.presets.find(p => p.name === e.Value);\n                const input = this.buildMirrorInput(preset);\n                this.removeExtraInputs();\n                this.defaultPreset.extraInputs.push(input);\n              } else if (this.appliesToMe(e.Data)) {\n                console.log(e.User, \"wants me to join a \", e.Value + \"'s group.\");\n                // someone wants me to join a group\n                const preset = this.data.presets.find(p => p.name === e.Value);\n                this.mirror(preset); // TODO i might not want to send the event here, but lets test it\n              }\n\n              break;\n            case POWER_OFF_ALL:\n              this.removeExtraInputs();\n              this.dialog.closeAll();\n              if (this.sharePreset === this.wheel.preset) {\n                this.unshare(this.defaultPreset, this.mirroringMe).subscribe(success => {\n                  this.changePreset(this.defaultPreset);\n                  this.command.powerOffAll();\n                });\n              }\n              break;\n          }\n        } else {\n          console.warn(\"<home component> invalid event: \", e);\n        }\n      }\n    });\n  }\n  appliesToMe(listOfPresetNames) {\n    return listOfPresetNames.includes(this.defaultPreset.name);\n  }\n  appliesToMyGroup(listOfPresetNames) {\n    return this.mirroringMe.some(p => listOfPresetNames.includes(p.name));\n  }\n  removeExtraInputs() {\n    this.wheel.preset.extraInputs.length = 0;\n    this.defaultPreset.extraInputs.length = 0;\n    setTimeout(() => this.wheel.render(), 0);\n  }\n  changePreset(newPreset) {\n    console.log(\"changing preset to\", newPreset);\n    this.wheel.preset = newPreset;\n    setTimeout(() => this.wheel.render(), 0);\n  }\n  updateHelp() {\n    this.helpInfo = this.getHelp();\n    console.log(\"updated help info\", this.helpInfo);\n    setInterval(() => {\n      this.helpInfo = this.getHelp();\n      console.log(\"updated help info\", this.helpInfo);\n    }, 1 * 60 * 1000);\n  }\n  getHelp() {\n    const date = new Date();\n    const dayOfTheWeek = date.getDay();\n    const CurrentHour = date.getHours();\n    let dayOfWeekString = \"sunday\";\n    switch (dayOfTheWeek) {\n      case 1:\n        dayOfWeekString = \"monday\";\n        break;\n      case 2:\n        dayOfWeekString = \"tuesday\";\n        break;\n      case 3:\n        dayOfWeekString = \"wednesday\";\n        break;\n      case 4:\n        dayOfWeekString = \"thursday\";\n        break;\n      case 5:\n        dayOfWeekString = \"friday\";\n        break;\n      case 6:\n        dayOfWeekString = \"saturday\";\n        break;\n      default:\n        break;\n    }\n    const ret = {\n      msg: \"\",\n      showConfirm: false\n    };\n    if (APIService.helpConfig == null) {\n      ret.msg = \"Unable to get help message.\";\n      return ret;\n    } else if (APIService.helpConfig[\"helpHours\"][dayOfWeekString] == null) {\n      ret.msg = \"Help hours are not defined for \" + dayOfWeekString + \".\";\n      return ret;\n    }\n    if (APIService.helpConfig[\"helpHours\"][dayOfWeekString].open && CurrentHour >= APIService.helpConfig[\"helpHours\"][dayOfWeekString].from && CurrentHour < APIService.helpConfig[\"helpHours\"][dayOfWeekString].to) {\n      ret.msg = APIService.helpConfig[\"helpMessage\"][\"workHours\"];\n      ret.showConfirm = true;\n      return ret;\n    } else {\n      ret.msg = APIService.helpConfig[\"helpMessage\"][\"afterHours\"];\n    }\n    return ret;\n  }\n  showHelp() {\n    const ref = this.dialog.open(HelpModal, {\n      width: \"80vw\",\n      data: this.helpInfo,\n      disableClose: true\n    });\n  }\n  showPowerOffDialog() {\n    const ref = this.dialog.open(PowerOffAllModalComponent, {\n      width: \"80vw\",\n      disableClose: true,\n      data: this.turnOff\n    });\n  }\n  showShareModal() {\n    const ref = this.dialog.open(ShareModalComponent, {\n      width: \"80vw\",\n      disableClose: true,\n      data: {\n        wheel: this.wheel,\n        share: this.share\n      }\n    });\n  }\n  /*\n  public showAudioModal() {\n    const ref = this.dialog.open(AudioModalComponent, {\n      width: \"80vw\",\n      disableClose: true,\n      data: this.defaultPreset\n    });\n  }\n  */\n  showMessageModal(title, message, showSpinner, closeText) {\n    return this.dialog.open(MessageModalComponent, {\n      width: \"80vw\",\n      disableClose: true,\n      data: {\n        title: title,\n        message: message,\n        showSpinner: showSpinner,\n        closeText: closeText\n      }\n    });\n  }\n  showMirrorModal(input) {\n    return this.dialog.open(MirrorModalComponent, {\n      width: \"80vw\",\n      disableClose: true,\n      data: {\n        preset: this.defaultPreset,\n        audio: this.audio,\n        input: input,\n        unmirror: this.unmirror\n      }\n    });\n  }\n};\n__decorate([ViewChild(WheelComponent), __metadata(\"design:type\", WheelComponent)], HomeComponent.prototype, \"wheel\", void 0);\n__decorate([ViewChild(AudioComponent), __metadata(\"design:type\", AudioComponent)], HomeComponent.prototype, \"audio\", void 0);\nHomeComponent = __decorate([Component({\n  selector: \"home\",\n  templateUrl: \"home.component.html\",\n  styleUrls: [\"home.component.scss\", \"../colorscheme.scss\"]\n}), __metadata(\"design:paramtypes\", [DataService, SocketService, APIService, CommandService, GraphService, typeof (_a = typeof MatDialog !== \"undefined\" && MatDialog) === \"function\" ? _a : Object])], HomeComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}